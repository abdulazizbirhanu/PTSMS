@using PTSMSDAL.Models.Scheduling.View

@{
ViewBag.Title = "EquipmentScheduler";
//ViewBag.Name = "Equipment Scheduler";
Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
.headerBlock {
background: #517842;
border-radius: 10px;
width: auto;
height: auto;
display: block;
margin: 10px;
color: #ffffff;
padding: 10px;
}

.custom-Col {
border-right: 3px solid;
border-color: #517842;
}

.add-event {
border-radius: 10px;
display: block;
border: solid;
border-color: #517842;
}

body {
margin: 0;
padding: 0;
font-family: "Lucida Grande",Helvetica,Arial,Verdana,sans-serif;
font-size: 14px;
}

.datepicker {
z-index: 1151 !important;
}
/*#addScheduledEventModel*/
#EditScheduledEventModel .modal-dialog {
width: 70%;
}

#addScheduledEventModel .modal-dialog {
width: 80%;
}
    #AddEquipmentMentEventModel .modal-dialog {
        width: 80%;
    }
    #addScheduleByDragAndDropTraineeModalPopup .modal-dialog {
        width: 80%;
    }

#DragAndDropModelPopup .modal-dialog {
width: 60%;
}

.buttoGroup {
background-color: #BDBDBD;
border-color: #00acd6;
}

.buttoGroup:active {
background-color: #00acd6;
border-color: #00acd6;
}

.ui-widget-header {
border: 1px solid #aed0ea;
background: #deedf7 url(images/ui-bg_highlight-soft_100_deedf7_1x100.png) 50% 50% repeat-x;
color: #222;
font-weight: bold;
font-size: x-small;
}

.fc-body .fc-resource-area .fc-cell-content {
padding-top: 0px;
padding-bottom: 0px;
}

.fc-timeline-event {
border-radius: 5px;
/* padding: 2px 0; */
/* margin-bottom: 1px; */
}

/*.btn-info:hover, .btn-info:focus, .btn-info:active, .btn-info.active, .open .dropdown-toggle.btn-info {
color: #ffffff;
background-color: #00acd6;
border-color: #269abc;
}*/


/*#calendar {
max-width: 900px;
margin: 50px auto;
}*/
.fc-helper-container{
background-color:black !important;
}
</style>

<style>
#scheduler-page .two-col {
margin: 60px 0 60px;
}

#scheduler-page #calendar {
font-size: 14px;
overflow: auto;
}

#scheduler-page #calendar .fc-event {
/* adjust hue */
background-color: #3b91ad;
border-color: #3b91ad;
}

#scheduler-page #calendar .fc-event:hover {
text-decoration: none; /* undo a previous rule */
}

#scheduler-page .larger-link-wrap {
margin-top: 2em;
}

#scheduler-page .larger-link-wrap,
#scheduler-page .sidebar ul {
font-size: 14px;
}

#scheduler-page .sidebar {
padding-left: 45px;
}

#scheduler-page .sidebar h3 {
margin-top: .4em;
font-size: 16px;
}

#scheduler-page .sidebar ul {
margin: 0;
padding: 0;
list-style: none;
}

#scheduler-page .sidebar li {
margin: 1em 0;
padding: 0;
}

#scheduler-page h2 span {
text-transform: uppercase;
font-size: 12px;
padding: 0 2px;
border: 1px solid rgba(255, 255, 255, .4);
position: relative;
top: -2px;
left: 5px;
}

/*#scheduler-page #banner > div {
margin-top: 34px;
margin-bottom: 34px;
}*/

#scheduler-page .fc-left h2 {
margin-left: 30px;
}
</style>

<style>
body {
/*margin-top: 40px;*/
/*text-align: center;*/
font-size: 14px;
font-family: "Lucida Grande",Helvetica,Arial,Verdana,sans-serif;
}


/*element.style {
display: inline-block;
}*/

/*.fc-resource-area{width:20%;}*/

#wrap {
width: 100%;
margin: 0 auto;
}

#external-events {
float: left;
width: 100%;
padding: 10px 10px;
border: 1px solid #ccc;
background: #eee;
text-align: left;
}

#external-events h4 {
font-size: 16px;
margin-top: 0;
padding-top: 1em;
}

#external-events .fc-event {
margin: 5px 5px;
cursor: pointer;
height: auto !important;
width: auto !important;
float: left;
padding: 2px 5px;
max-width: 200px;
}

#external-events p {
margin: 1.5em 0;
font-size: 11px;
color: #666;
}

#external-events p input {
margin: 0;
vertical-align: middle;
}

#calendar {
float: right;
/*width: 87%;*/
}
.main-header {
    position: relative;
    max-height: 0px;
    z-index: 1030;
}
td.fc-resource-area.ui-widget-header {
    width: 170px !important;
}
  .fc-toolbar {
    margin-bottom: 0em !important;
}
  #external-events
  {
      margin:0px;
  }

    #content-wrapper
    {
        padding:0px;
    }
    #content-wrapper div {
        float: left;
        min-width: 75px;
        padding:2px 7px 2px 0;
    }
    .equ-sel {
        float: left;
        width: 70%;
        padding: 2px 0 2px 7px;
    }
   


</style>

@*<link href="~/Content/bootstrap.min.css" rel="stylesheet" />*@
<link href="~/Content/FullCalendar/jquery-ui.min.css" rel="stylesheet" />

<link href="~/Content/AdminLTE/plugins/fullcalendar-2.9.1/fullcalendar.min.css" rel="stylesheet" />
<link href="~/Content/AdminLTE/plugins/fullcalendar-scheduler-1.3.3/scheduler.min.css" rel="stylesheet" />

<link href="~/Content/AdminLTE/plugins/datepicker/datepicker3.css" rel="stylesheet" />
<link href="~/Content/AdminLTE/plugins/qtip/jquery.qtip.css" rel="stylesheet" />
@*https://select2.github.io/examples.html#programmatic-control*@
<link href="~/Content/AdminLTE/plugins/select2/select2.css" rel="stylesheet" />
<link href="~/Content/AdminLTE/plugins/daterangepicker/daterangepicker-bs3.css" rel="stylesheet" />
<link href="~/Content/AdminLTE/plugins/ajax-progress-bar/css/jquery.progressTimer.css" rel="stylesheet" />

<link href="~/Content/AdminLTE/plugins/timepicker/bootstrap-timepicker.min.css" rel="stylesheet" />
<link href="~/Content/AdminLTE/plugins/bootstrap-datetimepicker/css/bootstrap-datetimepicker.css" rel="stylesheet" />

<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/validator.js"></script>

@section scripts
{
<script src="~/Scripts/FullCalendar/jquery-ui.custom.min.js"></script>
<script src="~/Content/AdminLTE/plugins/fullcalendar-scheduler-1.3.3/lib/moment.min.js"></script>

<script src="~/Content/AdminLTE/plugins/fullcalendar/fullcalendar.min.js"></script>
<script src="~/Content/AdminLTE/plugins/fullcalendar-2.9.1/fullcalendar.min.js"></script>
<script src="~/Content/AdminLTE/plugins/fullcalendar-scheduler-1.3.3/scheduler.min.js"></script>


<script src="~/Content/AdminLTE/plugins/datepicker/bootstrap-datepicker.js"></script>
<script src="~/Content/AdminLTE/plugins/qtip/jquery.qtip.js"></script>
<script src="~/Content/AdminLTE/plugins/daterangepicker/daterangepicker.js"></script>
<script src="~/Content/AdminLTE/plugins/select2/select2.full.min.js"></script>
<script src="~/Content/AdminLTE/plugins/ajax-progress-bar/js/jquery.progressTimer.js"></script>

<script src="~/Content/AdminLTE/plugins/timepicker/bootstrap-timepicker.min.js"></script>
<script src="~/Content/AdminLTE/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.min.js"></script>
<script src="~/Scripts/CustomScript/Dispatch.js"></script>

<script>

$(function () { // dom ready
var $AddDropDownTrainee = $("#dpdAddTrainee1").select2({
maximumSelectionLength: 1
});
var $AddDropDownLesson = $("#dpdAddLesson1").select2({
maximumSelectionLength: 1
});

/* initialize the external events
-----------------------------------------------------------------*/
/*
$('#external-events .fc-event').each(function () {

// store data so the calendar knows to render an event upon drop
$(this).data('event', {
title: $.trim($(this).text()), // use the element's text as the event title
stick: true // maintain when user navigates (see docs on the renderEvent method)
});

// make the event draggable using jQuery UI
$(this).draggable({
zIndex: 999,
revert: true,      // will cause the event to go back to its
revertDuration: 0  //  original position after the drag
});
});*/

    ////////


    ////////////



//////////////////////////Begin, Get Current date //////////////////////////
var today = new Date();
var dd = today.getDate();
var mm = today.getMonth() + 1; //January is 0!
var yyyy = today.getFullYear();

if (dd < 10) {
dd = '0' + dd
}
if (mm < 10) {
mm = '0' + mm
}
today = mm + '/' + dd + '/' + yyyy;
//////////////////////////End, Get Current date //////////////////////////////

var todayDate = moment().startOf('day');
var YESTERDAY = todayDate.clone().subtract(1, 'day').format('YYYY-MM-DD');
var TODAY = todayDate.format('YYYY-MM-DD');
var TOMORROW = todayDate.clone().add(1, 'day').format('YYYY-MM-DD');

//Make event color Equipment specific
var EquipmentList = null;
$.ajax({
url: "/Scheduler/ListScheduledEquipment",
type: 'GET',
success: function (result) {
debugger;
if (result.hasList) {
    EquipmentList = result.resultData;
}
},
error: function () {
bootbox.alert("Error has occured while coloring the event.");
}
});
debugger;
var displyDate = new Date();

//var revertFunc = null;


if ('@TempData["displayDate"]')
displyDate = '@TempData["displayDate"]';
else
displyDate = new Date;
    $("#Eqipmentlist").select2({
        placeholder: "Filter Equipments"
    }).empty();

    $.ajax({
        url: "/Scheduler/GetListOffEquipment",
        type: 'POST',
        success: function (result) {
            if (result.hasList) {
                debugger;
                var optgroup = $('<optgroup>');
                jQuery.each(result.resultData, function (index, item) {
                    var option = $("<option data-id='" + item.EquipmentId + "'></option>");
                    option.val(item.EquipmentId);
                    option.text(item.NameOrSerialNo);
                    optgroup.append(option);
                    $("#Eqipmentlist").append(optgroup);
                });
            }
        },
        error: function () {
            bootbox.alert("Error has occured while coloring the event.");
        }
    });


    $("#Eqipmentlist").change(function () {
        var EquiList = '';
        var res;
        var foo = $('#Eqipmentlist').val();

        $(foo).each(function (i, sel) {
            EquiList = EquiList + '~' + sel;

        });

        $.ajax({
            url: "/Scheduler/GetSchedulerResource/",
            type: 'POST',
            data: { EquiList: EquiList },
            success: function (result) {
                res = result;
                $('#calendar').fullCalendar('refetchResources');
            },
            error: function () {
            }
        });
    });

    function collapseRows()
    {
        debugger;

        var x = $("div.fc-content").children('table').children('tbody').find("tr");

        jQuery.each(x, function (index, item) {
            if ($(this).hasAttr('data-resource-id')) {
                $(this).css('display', 'none');
                // ...
            }
        });

    }
    var customButtonsTitle = 'Toggle collapse';
    $('#calendar').fullCalendar({
theme: true,
resourceAreaWidth: 230,
editable: true,
droppable: true,
aspectRatio: 1.5,
scrollTime: '00:00',
header: {
    left: 'CollapseAll today prev,next',
center: 'title',
//right: 'month,,basicDay'
right: 'timelineDay,timelineSevenDays,timelineMonthDays'
},
schedulerLicenseKey: 'CC-Attribution-NonCommercial-NoDerivatives',
customButtons: {
    CollapseAll: {
        text: customButtonsTitle,
    click: function collapseRows() {
        debugger;
        if (customButtonsTitle === 'Toggle collapse')
        {
            var x = $("div.fc-content").children('table').children('tbody').find("tr");

            jQuery.each(x, function (index, item) {
                if ($(this).attr('data-resource-id')) {
                    $(this).css('display', 'none');
                    // ...
                }
            });
            var y = $("div.fc-content").children('.fc-rows').children('table').children('tbody').find("tr");

            jQuery.each(y, function (index, item) {
                if ($(this).attr('data-resource-id')) {
                    $(this).css('display', 'none');
                    // ...
                }
            });
            customButtonsTitle = 'Expand all';
        }
        else
        {
            var x = $("div.fc-content").children('table').children('tbody').find("tr");

            jQuery.each(x, function (index, item) {
                if ($(this).attr('data-resource-id')) {
                    $(this).css('display', '');
                    // ...
                }
            });
            var y = $("div.fc-content").children('.fc-rows').children('table').children('tbody').find("tr");

            jQuery.each(y, function (index, item) {
                if ($(this).attr('data-resource-id')) {
                    $(this).css('display', '');
                    // ...
                }
            });
            customButtonsTitle = 'Toggle collapse';
        }


    }
    }
},
defaultView: 'timelineDay',
defaultDate: displyDate,
views: {
timelineDay: {
    type: 'timeline',
    duration: { days: 1 }
},
timelineSevenDays: {
    type: 'timeline',
    duration: { weeks: 1 }
},
timelineFiftinDays: {
    type: 'timeline',
    defaultView: 'basicWeek',
    duration: { days: 15 }
},
timelineMonthDays: {
    type: 'timeline',
    duration: { month: 1 }
},
},
resourceLabelText: '',//'Equipment List',
resourceColumns: [
{
labelText: 'Model',
field: 'equiDisplayName'
}//,
//{
//labelText: 'Maintenance Remaining Hours',
//field: 'EstimatedRemainingHours'
//}
],
resourceGroupField: 'equipmentModel',
resources: function (callback) {
    //do stuff
    var EquiList = '';
    var res;
    var foo = $('#Eqipmentlist').val();

    $(foo).each(function (i, sel) {
        EquiList = EquiList + '~' + sel;

    });

    $.ajax({
        url: "/Scheduler/GetSchedulerResource/",
        type: 'POST',
        data: { EquiList: EquiList },
        success: function (result) {
            res = result;
            callback(res);
        },
        error: function () {
        }
    });



},
//events: '/Scheduler/GetFTDandFlyingScheduledEvent/'eventSources,
eventSources: [{
url: '/Scheduler/GetFTDandFlyingScheduledEvent/',
type: 'GET',
data: function () {
    debugger;
    var currentDate = $('#calendar').fullCalendar('getDate');
    //var currentDate = new Date('4/2/2017');
    if (currentDate) {

        var clickedDateTime = new Date(currentDate.toString());
        var convertedDateTime = new Date(clickedDateTime - 3 * 60 * 60 * 1000);

        var day = convertedDateTime.getDate();
        var month = convertedDateTime.getMonth() + 1;
        var year = convertedDateTime.getFullYear();

        return {
            month: month,
            year: year
        }
    }
}
}],



eventRender: function (event, element, view) {

//var clickedDateTime = new Date(date.toString());


var date = new Date();
if (EquipmentList != null) {

    jQuery.each(EquipmentList, function (index, item) {

        if (event.resourceId == item.EquipmentId) {
            $(element).css("backgroundColor", item.Color);
        }

    });


}
///////////////////////////////start, Color Schedule based on status////////////////
if (event.description.toLowerCase().indexOf("new") > 0) {
    $(element).css("backgroundColor", "blue");
}
else if (event.description.toLowerCase().indexOf("checkedin") > 0) {
    $(element).css("backgroundColor", "#00eeee");//#00eeee - cyan2
}
else if (event.description.toLowerCase().indexOf("checkedinauthorized") > 0) {
    $(element).css("backgroundColor", "	#8fbc8f"); //	#8fbc8f - DarkSeaGreen
}
else if (event.description.toLowerCase().indexOf("rampout") > 0) {
    $(element).css("backgroundColor", "	#bf3eff");//	#bf3eff - DarkOrchid1
}
else if (event.description.toLowerCase().indexOf("rampin") > 0) {
    $(element).css("backgroundColor", "#00bfff");//#00bfff - DeepSkyBlue1
}
else if (event.description.toLowerCase().indexOf("evaluated") > 0) {
    $(element).css("backgroundColor", "#9400d3");//#9400d3 - DarkViolet
}
else if (event.description.toLowerCase().indexOf("unaccepted") > 0) {
    $(element).css("backgroundColor", "#ff1493");//#ff1493 - DeepPink1
}
else if (event.description.toLowerCase().indexOf("completed") > 0) {
    $(element).css("backgroundColor", "#228b22");//#228b22 - ForestGreen
}
else if (event.description.toLowerCase().indexOf("unattended") > 0) {
    $(element).css("backgroundColor", "#ffd700"); //#ffd700 - gold1
}
else if (event.description.toLowerCase().indexOf("canceled") > 0) {
    $(element).css("backgroundColor", "red");
    setInterval(function () {
        element.fadeOut(900).delay(300).fadeIn(800);
    }, 2000);
}

if (event.title.toLowerCase().indexOf("maintenance") > 0) {
    $(element).css("backgroundColor", "red");
    //$(element).draggable(false);
    $(element).click(false);
    $(element).dblclick(false);
}

///////////////////////////////end, Color Schedule based on status////////////////


if (event.title.toLowerCase().indexOf("briefing") >= 0 || event.title.toLowerCase().indexOf("debriefing") >= 0) {
    $(element).css("backgroundColor", "#FFA500");

}
    else
{
    element.qtip({
        content: {
            text: event.description
        },
        style: {
            classes: 'qtip-green qtip-shadow qtip-youtube'
        },
        position: {
            my: 'top left',  // Position my top left...
            at: 'bottom center', // at the bottom right of...
            //target: $('.selector') // my target
        }

    });
}

},
dayClick: function (date, jsEvent, view, resourceObj) {

debugger;
//$('#lblAddAvailabilityMessage').html('');
//var $AddDpdTrainee = $('#dpdAddTrainee1').val(null).trigger("change");
//var $AddDpdLesson = $('dpdAddLesson1').val(null).trigger("change");

////Remove all rows except the first
//var addedRowCounter = parseInt($('#txtNumberOfTraineeRowLessonAdded').val());
//var removedRowCounter = parseInt($('#txtNumberOfTraineeLessonRowRemoved').val());
//var rowCounter = addedRowCounter + removedRowCounter;

//if (rowCounter > 1) {
//    for (var i = 2; i <= rowCounter; i++) {
//        $('#TraineeLessonContainer > .div' + i).remove();
//    }
//}

//Initialize number of row in Trainee Lesson Association
//var count = 1;
//$('#txtNumberOfTraineeRowLessonAdded').val(count);
//count = 0;
//$('#txtNumberOfTraineeLessonRowRemoved').val(count);

//$("#btnAddEvent").removeAttr('disabled');

//$('#txtEquipmentIdHide').val(resourceObj.id);
//Begin, Get exact clicked date and time
//var clickedDateTime = new Date(date.toString());
//var convertedDateTime = new Date(clickedDateTime - 3 * 60 * 60 * 1000);

//var hour = convertedDateTime.getHours();
//var min = convertedDateTime.getMinutes();
//var sec = convertedDateTime.getSeconds();

//if (hour.toString().length == 1)
//    hour = "0" + hour;
//if (min.toString().length == 1)
//    min = "0" + min;
//var time = hour + ":" + min;

//$('#txtAddStartingTime').val(time);


//var dd1 = convertedDateTime.getDate();
//var mm1 = convertedDateTime.getMonth() + 1;
//var yyyy1 = convertedDateTime.getFullYear();

//if (dd1 < 10) {
//    dd1 = '0' + dd1
//}
//if (mm1 < 10) {
//    mm1 = '0' + mm1
//}

//$('#lblMyModalTitleEquipmentName').html(resourceObj.EquipmentName);
//$('#lblMyModalTitleTime').html(mm1 + '/' + dd1 + '/' + yyyy1 + " " + time);
//End, Get extracted and exact clicked date and time

////Begin, Equipment Reservation Checker
//var equipmentId = resourceObj.id;
//var submitDate = mm1 + '/' + dd1 + '/' + yyyy1;

//var EquipmentReservationCheckerUrl = "/Scheduler/GetReservedDateTimes";

//var postData = {
//    'equipmentId': equipmentId,
//    'date': submitDate
//};

//Display at what time equipment is reservation.
//$.ajax({
//    url: EquipmentReservationCheckerUrl,
//    type: 'POST',
//    data: postData,
//    success: function (result) {

//        if (result.hasList) {
//            $("#UnorderReservedDateTimes").empty();
//            jQuery.each(result.resultData, function (index, DisplayOptionTimeItem) {
//                $('#InstructionContainer').removeClass('hide');

//                $('#UnorderReservedDateTimes').append($('<li>', {
//                    value: DisplayOptionTimeItem.Id,
//                    text: DisplayOptionTimeItem.Name
//                }));

//            });
//        }
//        else {
//            $("#btnAddEvent").attr("disabled", "disabled");
//        }
//    },
//    error: function () {

//    }
//});
//End, Equipment Reservation Checker


//var ActualclickedDate = new Date(mm1 + '/' + dd1 + '/' + yyyy1 + ' 12:00' + ' AM');

////Do not add event to the already passed date.
//if (!(ActualclickedDate < new Date((mm + '/' + dd + '/' + yyyy)))) {

    //$('#txtAddDateHide').val(mm1 + '/' + dd1 + '/' + yyyy1);



    //Make dropdown option empty
    //var $AddTraineeDropDown = $("#dpdAddTrainee1").select2({
    //    maximumSelectionLength: 1
    //});
    //var $AddDropDownLesson = $("#dpdAddLesson1").select2({
    //    maximumSelectionLength: 1
    //});
    //$AddDropDownTrainee.empty();
    //$AddDropDownLesson.empty();


    //////////////////////////////////Get all trainees who are able to take any lesson to which they are assign for on that equipment./////////////////////////////

    //var Url = "/Scheduler/GetTraineeList";
    //var postDataForTraineeList = {
    //    'equipmentId': equipmentId,
    //    'date': mm1 + '/' + dd1 + '/' + yyyy1,
    //    'time': time
    //};

    //$.ajax({
    //    url: Url,
    //    data: postDataForTraineeList,
    //    type: 'POST',
    //    success: function (result) {
    //        if (result.hasList) {

    //            jQuery.each(result.resultData, function (index, lnItem) {
    //                $('#dpdAddTrainee1').append($('<option>', {
    //                    value: lnItem.Id + '',
    //                    text: lnItem.Name + ''
    //                }));
    //            });
    //        }
    //        else {
    //            $("#lblAddAvailabilityMessage").html("There is no available trainee/s. Possible causes: <ul><li>Trainee/s are busy on the mentioned date and time. </li> <li>Trainee/s has already taken the entered lesson.</li><li>Trainee/s has briefing and debriefing in the mentioned date and time.</li></ul>");
    //            $("#btnAddEvent").attr("disabled", "disabled");
    //        }
    //    },
    //    error: function () {

    //    }
    //});
    $('#EquipmentId').val(resourceObj.id);
    $('#AddEquipmentMentEventModel').modal('show');
    return false;
//}
//else {
//    bootbox.alert("It is impossible to add event for the already passed time.");
//    return false;
//}
    },
    eventClick: function (event, jsEvent, view, resourceObj) 
{

debugger;
$('#txtDragAndDropTraineeEquipmentIdHide').val(event.resourceId);
$('#txtDragAndDropLessonIdHide').val(event.id);
$("#btnEdit").removeAttr("disabled");


if (event.title.toLowerCase().indexOf("briefing") >= 0 || event.title.toLowerCase().indexOf("debriefing") >= 0) {
    $('#lblBriefingAndDebriefing').html(event.description);
    $('#BriefingAndDebriefingModelPopup').modal('show');
}
else {

    $('#lblEditAvailabilityMessage').html('');

    $('#txtfylingAndFTDScheduleId').val(event.id);

    var startDateTime = new Date(event.start.toString());
    startDateTime = new Date(startDateTime - 3 * 60 * 60 * 1000);
    var endDateTime = new Date();
    if (event.end != null) {
        endDateTime = new Date(event.end.toString());
        endDateTime = new Date(endDateTime - 3 * 60 * 60 * 1000);
    }

    var day = startDateTime.getDate();
    var month = startDateTime.getMonth() + 1;
    var year = startDateTime.getFullYear();

    var hour = startDateTime.getHours();
    var min = startDateTime.getMinutes();
    var sec = startDateTime.getSeconds();

    if (hour.toString().length == 1)
        hour = "0" + hour;
    if (min.toString().length == 1)
        min = "0" + min;
    var time = hour + ":" + min;
    debugger;
    $('#txtEditDate').datepicker('setDate', new Date(month + '/' + day + '/' + year));
    $('#txtEditDate').val(month + '/' + day + '/' + year);
    $('#txtDateForUpdate').datepicker('setDate', new Date(month + '/' + day + '/' + year));
    $('#txtDateForUpdate').val(month + '/' + day + '/' + year);
    $('#txtTimeForUpdate').val(time);

    var unAssigned = null;

    //////////////////////////////////////Display schedule detail to the view////////////////////////////////////////
    $("#lblAvailabilityMessage").html("");

    $('#txtAttenModuleScheduleId').val(event.id);
    $('#cancelFlyingAndScheduling').val(event.id);

    $('#txtEventID').html(event.id);
    $('#txtDescription').html(event.description);

    //GET EVENT DETAIL
    var getListUrl = "/Scheduler/GetFlyingAndFTDScheduleDetail";

    var postData = {
        'flyingAndFTDScheduleId': event.id
    };

    //Make dropdown option empty
    var EquipmentDropDown = $('#dpdEditEquipment');
    EquipmentDropDown.empty();
    var EditInstructorDropDown = $('#dpdEditInstructor');
    EditInstructorDropDown.empty();
    /// new

    //
    ////////////////////////start, GET DATA(FREE EQUIPMENT and INSTRUCTOR ) FROM THE SERVER FOR THE Lesson ITS EVENT TRIGGERED////////////////////////
    //LessonId, Date and time

    //Get data to be posted
    var fylingAndFTDScheduleId = $('#txtEventID').text();
    var date = $('#txtDateForUpdate').val();
    var time = $('#txtTimeForUpdate').val();

    var Url = "/Scheduler/GetFreeInstructors";

    var freeResourcePostData = {
        'flyingFTDScheduleId': fylingAndFTDScheduleId,
        'date': date,
        'time': time
    };

    //Get other equipment to select from
    $.ajax({
        url: Url,
        type: 'POST',
        data: freeResourcePostData,
        success: function (result) {
            debugger;
            //And Initialize the first/defualt option for all of those elements
        
            $('#dpdEditInstructor').append($('<option>', {
                value: '',
                text: '--Select Instructor--'
            }));
            // new
            debugger;
            jQuery.each(result.resultData, function (index, Instructor) {
                
                $('#dpdEditInstructor').append($('<option>', {
                        value: Instructor.Id,
                        text: Instructor.Name
                      }));
                
            });
            //////
           
            $.ajax({
                url: getListUrl,
                type: 'POST',
                data: postData,
                success: function (result) {


                    if (result.foundScheduledEventDetail) {
                        debugger;
                        //
                        var isEquipmentDoesntIncluded = true;
                      
                        //Not to allow duplicate value in the dropdown
                     
                        $('#txtEditLessonId').val(result.ScheduledEventData.LessonId);
                        $('#txtEditTraineeId').val(result.ScheduledEventData.TraineeId);
                        $('#txtSequence').val(result.ScheduledEventData.Sequence);
                        $('#txtBatchIdCurrent1').val('@ViewBag.BatchClassId');
                        $('#txtBatchIdCurrent2').val('@ViewBag.BatchClassId');
                        $('#txtLessonTypeCurrent1').val('@ViewBag.LessonType');
                        $('#txtLessonTypeCurrent2').val('@ViewBag.LessonType');
                        $('#dpdEditInstructor').append($('<option>', {
                            value: result.ScheduledEventData.Instructor.InstructorId,
                            text: result.ScheduledEventData.Instructor.Person.FirstName + ' ' + result.ScheduledEventData.Instructor.Person.MiddleName + ''
                        }));

                        $('#dpdEditInstructor').val(result.ScheduledEventData.Instructor.InstructorId);

                        //Dispaly cancelation reason if any
                        if (result.ScheduledEventData.Status == "Canceled") {
                            $('#cancelReason').val(result.ScheduledEventData.Reason);
                            $('#cancelRemark').val(result.ScheduledEventData.Remark);
                            $('#cancelFlyingAndScheduling').attr("disabled", "disabled");
                        }
                        /////////////////////////////////////////////////////////////////////////////////////////////////Populate free Equipments

                        //var selectedEquipmentId = $('#dpdEditEquipment').val();
                        //jQuery.each(unAssigned, function (index, equipmentItem) {
                        //    debugger;
                        //    //Populate approprate Instructor permitted to teach with this equipment
                        //    if (equipmentItem.Id == selectedEquipmentId) {

                        //        jQuery.each(equipmentItem.Instructors, function (index, instructorItem) {

                        //            //Check if Instructors doesn't already included in the dropdown, otherwise leave it.
                        //            var isInstructorDoesntIncluded = true;

                        //            $('#dpdEditInstructor option').each(function () {

                        //                if ($(this).val() == instructorItem.Id) {
                        //                    isInstructorDoesntIncluded = false;
                        //                }
                        //            });
                        //            //Not to allow duplicate value in the dropdown
                        //            if (isInstructorDoesntIncluded == true) {
                        //                $('#dpdEditInstructor').append($('<option>', {
                        //                    value: instructorItem.Id + '',
                        //                    text: instructorItem.Name
                        //                }));
                        //            }
                        //        });
                        //    }
                        //});
                        ///////////////////////////////////////////////////////////////////////////////////////////////////Populate free Equipments
                    }
                    if (result.foundBriefingDetail) {
                        $('#dpdEditBriefingTime').empty();

                        $('#dpdEditBriefingTime').append($('<option>', {
                            value: '',
                            text: '--Select Briefing Time--'
                        }));

                        //Format briefing start time
                        var briefingStartDateTime = new Date(parseInt(result.Briefing.BriefingAndDebriefing.StartingTime.substr(6)));

                        var day1 = briefingStartDateTime.getDate();
                        var month1 = briefingStartDateTime.getMonth() + 1;
                        var year1 = briefingStartDateTime.getFullYear();

                        var hour1 = briefingStartDateTime.getHours();
                        var min1 = briefingStartDateTime.getMinutes();

                        if (hour1.toString().length == 1)
                            hour1 = "0" + hour1;
                        if (min1.toString().length == 1)
                            min1 = "0" + min1;
                        var time1 = hour1 + ":" + min1;

                        //Format briefing end time
                        var briefingEndDateTime = new Date(parseInt(result.Briefing.BriefingAndDebriefing.EndingTime.substr(6)));

                        var day2 = briefingEndDateTime.getDate();
                        var month2 = briefingEndDateTime.getMonth() + 1;
                        var year2 = briefingEndDateTime.getFullYear();

                        var hour2 = briefingEndDateTime.getHours();
                        var min2 = briefingEndDateTime.getMinutes();

                        if (hour2.toString().length == 1)
                            hour2 = "0" + hour2;
                        if (min2.toString().length == 1)
                            min2 = "0" + min2;
                        var time2 = hour2 + ":" + min2;

                        $('#dpdEditBriefingTime').append($('<option>', {
                            value: result.Briefing.BriefingAndDebriefingId,
                            text: month1 + '/' + day1 + '/' + year1 + ' ' + time1 + ' - ' + month2 + '/' + day2 + '/' + year2 + ' ' + time2
                        }));
                        $('#dpdEditBriefingTime').val(result.Briefing.BriefingAndDebriefingId);
                    }

                    if (result.foundDebriefingDetail) {
                        $('#dpdEditDebriefingTime').empty();

                        $('#dpdEditDebriefingTime').append($('<option>', {
                            value: '',
                            text: '--Select Debriefing Time--'
                        }));

                        //Format briefing start time
                        var briefingStartDateTime = new Date(parseInt(result.Debriefing.BriefingAndDebriefing.StartingTime.substr(6)));

                        var day1 = briefingStartDateTime.getDate();
                        var month1 = briefingStartDateTime.getMonth() + 1;
                        var year1 = briefingStartDateTime.getFullYear();

                        var hour1 = briefingStartDateTime.getHours();
                        var min1 = briefingStartDateTime.getMinutes();

                        if (hour1.toString().length == 1)
                            hour1 = "0" + hour1;
                        if (min1.toString().length == 1)
                            min1 = "0" + min1;
                        var time1 = hour1 + ":" + min1;

                        //Format briefing end time
                        var briefingEndDateTime = new Date(parseInt(result.Debriefing.BriefingAndDebriefing.EndingTime.substr(6)));

                        var day2 = briefingEndDateTime.getDate();
                        var month2 = briefingEndDateTime.getMonth() + 1;
                        var year2 = briefingEndDateTime.getFullYear();

                        var hour2 = briefingEndDateTime.getHours();
                        var min2 = briefingEndDateTime.getMinutes();

                        if (hour2.toString().length == 1)
                            hour2 = "0" + hour2;
                        if (min2.toString().length == 1)
                            min2 = "0" + min2;
                        var time2 = hour2 + ":" + min2;

                        $('#dpdEditDebriefingTime').append($('<option>', {
                            value: result.Debriefing.BriefingAndDebriefingId,
                            text: month1 + '/' + day1 + '/' + year1 + ' ' + time1 + ' - ' + month2 + '/' + day2 + '/' + year2 + ' ' + time2
                        }));
                        $('#dpdEditDebriefingTime').val(result.Debriefing.BriefingAndDebriefingId);
                    }



                    ///////////////////Available Get Briefing And Debriefing///////////////////////////////////
                    var BriefingAndDebriefingUrl = "/Scheduler/GetBriefingAndDebriefing";
                    var instructorId = $('#dpdEditInstructor').val();
                    var equipmentId = $('#dpdEditEquipment').val();
                    var traineeLesson = $('#txtEditTraineeId').val() + '-' + $('#txtEditLessonId').val() + '~';

                    var BriefingAndDebriefingPostData = {
                        'date': month + '/' + day + '/' + year,
                        'time': time,
                        'instructorId': instructorId,
                        'equipmentId': equipmentId,
                        'traineeLesson': traineeLesson
                    };

                    $.ajax({
                        url: BriefingAndDebriefingUrl,
                        type: 'POST',
                        data: BriefingAndDebriefingPostData,
                        success: function (result) {

                            if (result.hasList) {
                                var briefingId = $('#dpdEditBriefingTime').val();
                                var debriefingId = $('#dpdEditDebriefingTime').val();

                                jQuery.each(result.resultData.Briefing, function (index, BriefingItem) {

                                    if (briefingId != BriefingItem.Id) {
                                        $('#dpdEditBriefingTime').append($('<option>', {
                                            value: BriefingItem.Id + '',
                                            text: BriefingItem.Name + ''
                                        }));
                                    }
                                });

                                jQuery.each(result.resultData.Debriefing, function (index, DebriefingItem) {

                                    if (debriefingId != DebriefingItem.Id) {

                                        $('#dpdEditDebriefingTime').append($('<option>', {
                                            value: DebriefingItem.Id + '',
                                            text: DebriefingItem.Name + ''
                                        }));
                                    }
                                });
                            }
                        },
                        error: function () {
                        }
                    });
                },
                error: function () {
                }
            });
        },
        error: function () {
        }
    });
    ////////////////////////end, GET DATA(FREE Equipment and Instructor ) FROM THE SERVER FOR THE Lesson ITS EVENT TRIGGERED////////////////////////

    //jQuery.noConflict();
    $('#EditScheduledEventModel').modal('show');

}
},
//eventDrop: function (event, dayDelta, minuteDelta, allDay, revertFunc) {
eventDrop: function (event, delta, revertFunc) {
if (event.title.toLowerCase().indexOf("maintenance") > 0) {
    revertFunc();
    return false;
}
debugger;
//revertFunc = revertFunc;
var date = getDate(event.start);
var startingTime = getTime(event.start);

var endingTime = getTime(event.end);
var box = bootbox.confirm({
    message: "Are you sure you want to change <b>" + event.title + " </b> to <b>" + date + " " + startingTime + "-" + endingTime + "</b>?",
    buttons: {
        confirm: {
            label: 'Yes, Definitely!',
            className: 'btn-info'
        },
        cancel: {
            label: 'No way!',
            className: 'btn-danger'
        }
    },
    callback: function (result) {

        //$('#btnUpdateDroppedEvent').removeAttr('disabled');

        if (result) {
            var type;
            debugger;
            if (event.title == 'Debriefing')
                $('#txtDragAndDropEventType').val('Debriefing');
            else if (event.title == 'Briefing')
                $('#txtDragAndDropEventType').val('Briefing');
            else
                $('#txtDragAndDropEventType').val('Lesson');
            $('#txtDragDate').val(date);
            $('#txtDragStartingTime').val(startingTime);
            $('#txtDragfylingAndFTDScheduleId').val(event.id);
            $('#txtDragEquipment').val(event.resourceId);

            $("#btnUpdateDroppedEvent").removeAttr('disabled');
            //IsTraineeInstructorAndEquipmentFee(string date, string startingTime, string endingTime, int flyingAndFTDScheduleId)
            var Url = "/Scheduler/IsTraineeInstructorAndEquipmentFee";

            var postData = {
                'date': date,
                'startingTime': startingTime,
                'endingTime': endingTime,
                'flyingAndFTDScheduleId': event.id,
                'equipmentId': event.resourceId

            };
            debugger;

            $.ajax({
                url: Url,
                type: 'POST',
                data: postData,
                success: function (result) {
                    $('#DragAndDropModelPopup').modal('show');
                    debugger;
                    $('#InformationContainerDragDrop').addClass('hide');
                    $('#lblDragAvailabilityMessage').html('');
                    var type = $('#txtDragAndDropEventType').val();
                    debugger;

                    if (result.resultData.isSuccess) {

                        debugger;
                        //GET EVENT DETAIL
                        var getListUrl = "/Scheduler/GetFlyingAndFTDScheduleDetail";

                        var postData = {
                            'flyingAndFTDScheduleId': event.id
                        };
                        $.ajax({
                            url: getListUrl,
                            type: 'POST',
                            data: postData,
                            success: function (result) {
                                debugger;
                                if (result.foundScheduledEventDetail) {

                                    //txtDragEquipment,txtDragLessonId,txtDragTraineeId,txtDragInstructorId
                                    //dpdDragDebriefingTime,dpdDragBriefingTime
                                    $('#txtDragLessonId').val(result.ScheduledEventData.LessonId);
                                    $('#txtDragTraineeId').val(result.ScheduledEventData.TraineeId);
                                    $('#txtDragInstructorId').val(result.ScheduledEventData.Instructor.InstructorId);
                                }
                                if (result.foundBriefingDetail) {
                                    $('#dpdDragBriefingTime').empty();

                                    $('#dpdDragBriefingTime').append($('<option>', {
                                        value: '',
                                        text: '--Select Briefing Time--'
                                    }));

                                    //Format briefing start time
                                    var briefingStartDateTime = new Date(parseInt(result.Briefing.BriefingAndDebriefing.StartingTime.substr(6)));

                                    var day1 = briefingStartDateTime.getDate();
                                    var month1 = briefingStartDateTime.getMonth() + 1;
                                    var year1 = briefingStartDateTime.getFullYear();

                                    var hour1 = briefingStartDateTime.getHours();
                                    var min1 = briefingStartDateTime.getMinutes();

                                    if (hour1.toString().length == 1)
                                        hour1 = "0" + hour1;
                                    if (min1.toString().length == 1)
                                        min1 = "0" + min1;
                                    var time1 = hour1 + ":" + min1;

                                    //Format briefing end time
                                    var briefingEndDateTime = new Date(parseInt(result.Briefing.BriefingAndDebriefing.EndingTime.substr(6)));

                                    var day2 = briefingEndDateTime.getDate();
                                    var month2 = briefingEndDateTime.getMonth() + 1;
                                    var year2 = briefingEndDateTime.getFullYear();

                                    var hour2 = briefingEndDateTime.getHours();
                                    var min2 = briefingEndDateTime.getMinutes();

                                    if (hour2.toString().length == 1)
                                        hour2 = "0" + hour2;
                                    if (min2.toString().length == 1)
                                        min2 = "0" + min2;
                                    var time2 = hour2 + ":" + min2;

                                    $('#dpdDragBriefingTime').append($('<option>', {
                                        value: result.Briefing.BriefingAndDebriefingId,
                                        text: month1 + '/' + day1 + '/' + year1 + ' ' + time1 + ' - ' + month2 + '/' + day2 + '/' + year2 + ' ' + time2
                                    }));
                                    $('#dpdDragBriefingTime').val(result.Briefing.BriefingAndDebriefingId);
                                }

                                if (result.foundDebriefingDetail) {
                                    $('#dpdDragDebriefingTime').empty();

                                    $('#dpdDragDebriefingTime').append($('<option>', {
                                        value: '',
                                        text: '--Select Debriefing Time--'
                                    }));

                                    //Format briefing start time
                                    var briefingStartDateTime = new Date(parseInt(result.Debriefing.BriefingAndDebriefing.StartingTime.substr(6)));

                                    var day1 = briefingStartDateTime.getDate();
                                    var month1 = briefingStartDateTime.getMonth() + 1;
                                    var year1 = briefingStartDateTime.getFullYear();

                                    var hour1 = briefingStartDateTime.getHours();
                                    var min1 = briefingStartDateTime.getMinutes();

                                    if (hour1.toString().length == 1)
                                        hour1 = "0" + hour1;
                                    if (min1.toString().length == 1)
                                        min1 = "0" + min1;
                                    var time1 = hour1 + ":" + min1;

                                    //Format briefing end time
                                    var briefingEndDateTime = new Date(parseInt(result.Debriefing.BriefingAndDebriefing.EndingTime.substr(6)));

                                    var day2 = briefingEndDateTime.getDate();
                                    var month2 = briefingEndDateTime.getMonth() + 1;
                                    var year2 = briefingEndDateTime.getFullYear();

                                    var hour2 = briefingEndDateTime.getHours();
                                    var min2 = briefingEndDateTime.getMinutes();

                                    if (hour2.toString().length == 1)
                                        hour2 = "0" + hour2;
                                    if (min2.toString().length == 1)
                                        min2 = "0" + min2;
                                    var time2 = hour2 + ":" + min2;

                                    $('#dpdDragDebriefingTime').append($('<option>', {
                                        value: result.Debriefing.BriefingAndDebriefingId,
                                        text: month1 + '/' + day1 + '/' + year1 + ' ' + time1 + ' - ' + month2 + '/' + day2 + '/' + year2 + ' ' + time2
                                    }));
                                    $('#dpdDragDebriefingTime').val(result.Debriefing.BriefingAndDebriefingId);



                                    /////////////////////// Read BRIEFING and DEBRIEFING and display as dropdown option. //////////////////
                                    //txtDragEquipment,txtDragLessonId,txtDragTraineeId,txtDragInstructorId

                                    var BriefingAndDebriefingUrl = "/Scheduler/GetBriefingAndDebriefing";
                                    var instructorId = $('#txtDragInstructorId').val();
                                    var equipmentId = $('#txtDragEquipment').val();
                                    var traineeLesson = $('#txtDragTraineeId').val() + '-' + $('#txtDragLessonId').val() + '~';

                                    debugger;
                                    var BriefingAndDebriefingPostData = {
                                        'date': date,
                                        'time': startingTime,
                                        'instructorId': instructorId,
                                        'equipmentId': equipmentId,
                                        'traineeLesson': traineeLesson
                                    };

                                    $.ajax({
                                        url: BriefingAndDebriefingUrl,
                                        type: 'POST',
                                        data: BriefingAndDebriefingPostData,
                                        success: function (result) {

                                            if (result.hasList) {
                                                var briefingId = $('#dpdDragBriefingTime').val();
                                                var debriefingId = $('#dpdDragDebriefingTime').val();

                                                jQuery.each(result.resultData.Briefing, function (index, BriefingItem) {

                                                    if (briefingId != BriefingItem.Id) {
                                                        $('#dpdDragBriefingTime').append($('<option>', {
                                                            value: BriefingItem.Id + '',
                                                            text: BriefingItem.Name + ''
                                                        }));
                                                    }
                                                });

                                                jQuery.each(result.resultData.Debriefing, function (index, DebriefingItem) {

                                                    if (debriefingId != DebriefingItem.Id) {

                                                        $('#dpdDragDebriefingTime').append($('<option>', {
                                                            value: DebriefingItem.Id + '',
                                                            text: DebriefingItem.Name + ''
                                                        }));
                                                    }
                                                });
                                            }
                                        },
                                        error: function () {
                                            $('#btnUpdateDroppedEvent').attr('disabled', 'disabled');
                                            revertFunc();
                                        }
                                    })
                                }
                                if (type == 'Debriefing') {
                                    $('#DebriefingDiv').removeClass('hide');
                                    $('#BriefingDiv').addClass('hide');
                                    $('#ckbDragDebriefing').prop('checked', true);
                                    $('#dpdDragDebriefingTime').attr('disabled', true);
                                    $('#CustomDragDebriefingTime').removeClass('hide');
                                    $('#txtDragCustomDebriefing').val('true');
                                    $('#txtDragDebriefingStartingTime').val(startingTime);

                                    $('#CustomDragBriefingTime').addClass('hide');

                                }
                                else if (type == 'Briefing') {
                                    $('#BriefingDiv').removeClass('hide');
                                    $('#DebriefingDiv').addClass('hide');
                                    $('#ckbDragBriefing').prop('checked', true);
                                    $('#dpdDragBriefingTime').attr('disabled', true);
                                    $('#CustomDragBriefingTime').removeClass('hide');
                                    $('#txtDragCustomBriefing').val('true');
                                    $('#txtDragBriefingStartingTime').val(startingTime);

                                    $('#CustomDragDebriefingTime').addClass('hide');
                                }
                                else {
                                    $('#BriefingDiv').removeClass('hide');
                                    $('#DebriefingDiv').removeClass('hide');
                                }
                            },
                            error: function () {
                                $('#btnUpdateDroppedEvent').attr('disabled', 'disabled');
                                revertFunc();
                            }
                        });


                    }
                    else {
                        var htmlMessage = "<ul>";
                        jQuery.each(result.resultData.message, function (index, messageItem) {
                            htmlMessage = htmlMessage + "<li>" + messageItem + "</li>";
                        });
                        htmlMessage = htmlMessage + "</ul>";
                        $('#lblDragAvailabilityMessage').html(htmlMessage);
                        //$('#btnUpdateDroppedEvent').attr('disabled', 'disabled');
                        revertFunc();
                    }
                },
                async: true,
                error: function () {
                    $('#btnUpdateDroppedEvent').attr('disabled', 'disabled');
                    revertFunc();
                }
            });
        }
        else {
            revertFunc();
            box.modal('hide');
        }
    }
});
////////////////////Check whether equipment is free at starting and ending time at which the event dropped.///////////////



},
drop: function (date, jsEvent, ui, resourceId) {
    debugger;
var ids = $(this).data('id');
var idsArray = ids.split('~');
var traineeId = idsArray[0];
var lessonId = idsArray[1];

var traineeName = $(this).text().substring(0, 6);
var startingDate = getDate(date);
var startingTime = getTime(date);
var equipmentId = resourceId;
var date = startingDate;
//alert('Event dropped. resourceId=' + equipmentId + ' traineeId=' + traineeId + ' date=' + startingDate + ' startingTime=' + startingTime + ' traineeName=' + traineeName);

$('#lblAddScheduleByDragAndDropTraineeMessage').html('');
$('#dpdAddDragAndDropTraineeLesson').val(null).trigger("change");

$("#btnAddDragAndDropTraineeEvent").removeAttr('disabled');


$('#txtDragAndDropTraineeEquipmentIdHide').val(equipmentId);
$('#txtAddDragAndDropTraineeStartingTime').val(startingTime);
$('#DragdropAddSuccessMessageTab').addClass('hide');
$('#DragdropAddSuccessMessage').html('');
$('#DragdropAddFailMessage').html('');

$('#lblMyModalTitleTraineeName').html(traineeName);
$('#lblDragAndDropTraineeModalTitleTime').html(startingDate + " " + startingTime);
//End, Get extracted and exact clicked date and time
    
    $("#dpdAddDragAndDropTrainees").select2({
    }).empty();
    debugger;
    var optgroupp = $('<optgroup>');
    var trainees = $('#txtDragAndDropTraineeTraineeIdHide').val();
    var traineesArray = trainees.split('-');
    jQuery.each(traineesArray, function (index, trainee) {
        debugger;
        var traine = trainee.split('~');
        var optionn = $("<option data-id='" + traine[0] + "'></option>");
        optionn.val(traine[0]);
        optionn.text(traine[1]);
        optgroupp.append(optionn);
        $("#dpdAddDragAndDropTrainees").append(optgroupp);
            
    });
    $("#dpdAddDragAndDropTrainees").val([traineeId]).trigger("change");
//Begin, Equipment Reservation Checker
var EquipmentReservationCheckerUrl = "/Scheduler/GetReservedDateTimes";

var postData = {
    'equipmentId': equipmentId,
    'date': startingDate
};

//Display at what time equipment is reservation.
$.ajax({
    url: EquipmentReservationCheckerUrl,
    type: 'POST',
    data: postData,
    success: function (result) {

        if (result.hasList) {
            $("#DragAndDropTraineeUnorderReservedDateTimes").empty();
            jQuery.each(result.resultData, function (index, DisplayOptionTimeItem) {
                $('#DragAndDropTraineeInstructionContainer').removeClass('hide');

                $('#DragAndDropTraineeUnorderReservedDateTimes').append($('<li>', {
                    value: DisplayOptionTimeItem.Id,
                    text: DisplayOptionTimeItem.Name
                }));

            });
        }
        else {
            $("#btnAddDragAndDropTraineeEvent").attr("disabled", "disabled");
        }
    },
    error: function () {
    }
});
//End, Equipment Reservation Checker


var ActualclickedDate = new Date(startingDate + ' ' + startingTime + ' AM');

//Do not add event to the already passed date.
//if (!(ActualclickedDate < new Date((mm + '/' + dd + '/' + yyyy)))) {

    $('#txtAddDragAndDropTraineeDateHide').val(startingDate);

    //Make dropdown option empty
    $("#dpdAddDragAndDropTraineeLesson").select2({
        maximumSelectionLength: 1
    }).empty();
   

    debugger;
    //var $lessonMulti = $('#dpdAddLesson' + traineeIndex);
    //$lessonMulti.empty();

    //Get all lessons that trainees can learn from a specifically clicked equipment
    var Url = "/Scheduler/GetTraineeLessonList";

    
    $.ajax({
        url: Url,
        data: {
            'equipmentId': equipmentId,
            'traineeId': traineeId,
            'ActualclickedDate': date
        },
        type: 'POST',
        success: function (result) {
            if (result.hasList) {
                var isLessonDroppedAtExactEquipmentType = false;
                debugger;
                jQuery.each(result.resultData, function (index, phaseItem) {

                    var optgroup = $('<optgroup>');
                    optgroup.attr('label', phaseItem.Name);

                    jQuery.each(phaseItem.LessonList, function (index, lessonItem) {
                        if (lessonId == lessonItem.Id) {
                            isLessonDroppedAtExactEquipmentType = true;
                        }
                        var option = $("<option data-id='" + lessonItem.IsAlreadyScheduled + "'></option>");
                        option.val(lessonItem.Id);
                        option.text(lessonItem.Name);
                        optgroup.append(option);
                        $("#dpdAddDragAndDropTraineeLesson").append(optgroup);
                    });
                });
                if (isLessonDroppedAtExactEquipmentType) {
                    $("#dpdAddDragAndDropTraineeLesson").val([lessonId, ""]).trigger("change");
                }
                else {
                    $("#lblAddScheduleByDragAndDropTraineeMessage").html("The next recommended lesson type is not suitable in the equipment the lesson dropped.");
                }
                //$("#dpdAddDragAndDropTraineeLesson").multiselect('refresh'); //refresh the select here
            }
            else {
                $("#lblAddScheduleByDragAndDropTraineeMessage").html("There is no available lesson.");
                $("#btnAddDragAndDropTraineeEvent").attr("disabled", "disabled");
            }
        },
        error: function () {
        }
    });

    $('#addScheduleByDragAndDropTraineeModalPopup').modal('show');
    return false;
/*}
else {
    bootbox.alert("It is impossible to add event for the already passed time.");
    return false;
}*/
//console.log('drop', date.format(), resourceId);

// is the "remove after drop" checkbox checked?
if ($('#drop-remove').is(':checked')) {
    // if so, remove the element from the "Draggable Events" list
    $(this).remove();
}
},
eventReceive: function (event) { // called when a proper external event is dropped
alert('What Event do i have Receiving?');
console.log('eventReceive', event);
}
});

function getDate(date) {
//debugger;
if (date != null) {

var startDateTime = new Date(date.toString());
startDateTime = new Date(startDateTime - 3 * 60 * 60 * 1000);

var day = startDateTime.getDate();
var month = startDateTime.getMonth() + 1;
var year = startDateTime.getFullYear();
var extractedDate = month + '/' + day + '/' + year;

return extractedDate;
}
}

function getTime(date) {
//debugger;
if (date != null) {

var startDateTime = new Date(date.toString());
startDateTime = new Date(startDateTime - 3 * 60 * 60 * 1000);

var hour = startDateTime.getHours();
var min = startDateTime.getMinutes();
var sec = startDateTime.getSeconds();

if (hour.toString().length == 1)
    hour = "0" + hour;
if (min.toString().length == 1)
    min = "0" + min;
var time = hour + ":" + min;

return time;
}
}

$('#txtAddStartingTime').change(function () {
$("#lblAddAvailabilityMessage").html("");
$AddDropDownLesson.val(null).trigger("change");
});
////////////////start, Drag and Drop Event handler/////////////////////////

$('body').on('click', "#ckbDragBriefing", function () {

if ($(this).prop("checked") == true) {
$('#dpdDragBriefingTime').attr('disabled', true);
$('#CustomDragBriefingTime').removeClass('hide');
$('#txtDragCustomBriefing').val("true");
}
else {
$('#dpdDragBriefingTime').removeAttr("disabled");
$('#CustomDragBriefingTime').addClass('hide');
$('#txtDragCustomBriefing').val("false");
}
});

$('body').on('click', "#ckbDragDebriefing", function () {
if ($(this).prop("checked") == true) {
$('#dpdDragDebriefingTime').attr('disabled', true);
$('#CustomDragDebriefingTime').removeClass('hide');
$('#txtDragCustomDebriefing').val("true");
}
else {
$('#dpdDragDebriefingTime').removeAttr("disabled");
$('#CustomDragDebriefingTime').addClass('hide');
$('#txtDragCustomDebriefing').val("false");
}
});

$('body').on('click', '#btnUpdateDroppedEvent', function () {
    debugger;

//Collect all data


var briefingTimeId = $('#dpdDragBriefingTime').val();
var debriefingTimeId = $('#dpdDragDebriefingTime').val();

var date = $('#txtDragDate').val();
var time = $('#txtDragStartingTime').val();
var instructorId = $('#txtDragInstructorId').val();
var equipmentId = $('#txtDragEquipment').val();
var isReschedule = 'false';
var fTDAndFlyingScheduleId = $('#txtDragfylingAndFTDScheduleId').val();
var traineeLesson = $('#txtDragTraineeId').val() + '-' + $('#txtDragLessonId').val() + '~';
////////////////Custom Debriefing ///////////////////////

var isCustomBriefingTime = $('#txtDragCustomBriefing').val();
var isCustomDebriefingTime = $('#txtDragCustomDebriefing').val();
var briefingStartingTime = $('#txtDragBriefingStartingTime').val();
var debriefingStartingTime = $('#txtDragDebriefingStartingTime').val();

//IsTraineeInstructorAndEquipmentFeeBriefingAndDebriefingTime(string date, string time, int instructorId, string traineeLesson, int equipmentId, string briefingtime, string debriefingTime,int fTDAndFlyingScheduleId, string isReschedule)
    if (instructorId === '')
        instructorId = 0;
  

var postData = {
    'date': date,
    'time': time,
    'instructorId': instructorId,
    'traineeLesson': traineeLesson,
    'equipmentId': equipmentId,
    'briefingtime': briefingTimeId,
    'debriefingTime': debriefingTimeId,
    'fTDAndFlyingScheduleId': fTDAndFlyingScheduleId,
    'isReschedule': isReschedule,
    'isCustomBriefingTime': isCustomBriefingTime,
    'isCustomDebriengTime': isCustomDebriefingTime,
    'briefingStartingTime': briefingStartingTime,
    'debriefingStartTime': debriefingStartingTime
};
debugger;
var Url = '/Scheduler/IsTraineeInstructorAndEquipmentFeeBriefingAndDebriefingTime';
    var isSuccess = false;
    
    postData.EventApplyingType = $('#txtDragAndDropEventType').val();
    debugger;
$.ajax({
    url: Url,
    data: postData,
    type: 'POST',
    success: function (result) {
        if (result.resultData.isSuccess) {
            isSuccess = true;
            //Continue submitting
            postData.batch = $('#dpdScheduleBatchClass').val();
            postData.lessonType = $('#txtLessonType').val();
            Url = '/Scheduler/UpdateScheduleFromDragAndDrop';
            $.ajax({
                url: Url,
                data: postData,
                type: 'POST',
                success: function (result) {

                    $('#InformationContainerDragDrop').removeClass('hide');
                    if (result.isSuccessUpdated) {
                        $('#EditDragDropSuccessContainer').removeClass('hide');
                        $('#EditDragDropFailContainer').addClass('hide');
                        $('#editDragDropSuccessMessage').html("You have successfuly update the schedule.");
                    }
                    else {
                        $('#EditDragDropFailContainer').removeClass('hide');
                        $('#EditDragDropSuccessContainer').addClass('hide');
                        $('#editDragDropFailMessage').html("Update is completed unsuccessfuly!");
                    }
                    if (result.hasList) {
                        debugger;

                        var newEvents = new Array();
                        $('#calendar').fullCalendar('removeEventSources');
                        jQuery.each(result.resultData.Data, function (index, res) {

                     
                              

                            newEvents.push(res);
                        });

                     
                        $('#calendar').fullCalendar('addEventSource', newEvents);
                        
                    }
                },
                async: true,
                error: function (error) {

                }
            });
        }
        else {
            //prevent form submission
            var htmlMessage = '<ul>';
            jQuery.each(result.resultData.message, function (index, messageItem) {
                htmlMessage = htmlMessage + '<li>' + messageItem + '</li>';
            });
            htmlMessage = htmlMessage + '</ul>';
            $('#lblDragAvailabilityMessage').html(htmlMessage);
            return false;
        }
    },
    async: true,
    error: function () {
    }
});
if (isSuccess == false) {
    event.preventDefault();
}

});
function containsObject(obj, list) {
    var isfound = false;
    jQuery.each(list, function (index, res) {
        if (res.id == obj)
            isfound = true;
    });
    return isfound;
};
    $('body').on('click', "#btnEditEvent", function () {

        //Collect all data
        var clicked = $('#txtIsEditSubmitButtonClicked').val();
        if (clicked === 'false') {

            var briefingTimeId = $('#dpdEditBriefingTime').val();
            var debriefingTimeId = $('#dpdEditDebriefingTime').val();

            var date = $('#txtDateForUpdate').val();
            var time = $('#txtTimeForUpdate').val();
            var instructorId = $('#dpdEditInstructor').val();
            var equipmentId = $('#dpdEditEquipment').val();
            var isReschedule = $('#txtIsReschedule').val();
            var fTDAndFlyingScheduleId = $('#txtfylingAndFTDScheduleId').val();
            // var fTDAndFlyingScheduleId = $('#txtDragAndDropLessonIdHide').val();
            var traineeLesson = $('#txtEditTraineeId').val() + '-' + $('#txtEditLessonId').val() + '~';


            //IsTraineeInstructorAndEquipmentFeeBriefingAndDebriefingTime(string date, string time, int instructorId, string traineeLesson, int equipmentId, string briefingtime, string debriefingTime,
            //int fTDAndFlyingScheduleId, string isReschedule)
            //txtEditBriefingStartingTime,txtEditDebriefingStartingTime,
            //txtEditCustomDebriefing, txtEditCustomBriefing
            ////////////////Custom Briefing//////////////////////////
            var isCustomBriefingTime = $('#txtEditCustomBriefing').val();
            var isCustomDebriefingTime = $('#txtEditCustomDebriefing').val();
            var briefingStartingTime = $('#txtEditBriefingStartingTime').val();
            var debriefingStartingTime = $('#txtEditDebriefingStartingTime').val();
            ////////////////Custom Debriefing ///////////////////////

            var postData = {
                'date': date,
                'time': time,
                'instructorId': instructorId,
                'traineeLesson': traineeLesson,
                'fTDAndFlyingScheduleId': fTDAndFlyingScheduleId,
                'EventApplyingType': 'Lesson',
                'isReschedule': isReschedule
            };
           
            var isSuccess = false;
            var Url = "/Scheduler/IsTraineeInstructorAndEquipmentFeeBriefingAndDebriefingTimeForUpdate";
            debugger;
            $.ajax({
                url: Url,
                data: postData,
                type: 'POST',
                success: function (result) {

                    if (result.resultData.isSuccess) {
                        $('#txtIsEditSubmitButtonClicked').val('true');
                        isSuccess = true;
                        Url = "/Scheduler/UpdateTraineeLessonSchedule";
                        
                        //$("#btnEditEvent").submit();
                        postData.batch = $('#dpdScheduleBatchClass').val();
                        postData.lessonType = $('#txtLessonType').val();

                        $.ajax({
                            url: Url,
                            data: postData,
                            type: 'POST',
                            success: function (result) {
                                debugger;
                                $('#InformationContainer').removeClass('hide');
                                if (result.hasList) {
                                    if (result.isSuccessUpdated) {
                                        $('#EditBriefingAndDebriefingSuccessContainer').removeClass('hide');
                                        $('#editDebriefingSuccessMessage').html("You have successfuly update the schedule.");
                                    }
                                    else {
                                        $('#EditBriefingAndDebriefingFailContainer').removeClass('hide');
                                        $('#editDebriefingFailMessage').html("Failed to update!");
                                    }
                                    var newEvents = new Array();
                                    $('#calendar').fullCalendar('removeEventSources');  
                                    jQuery.each(result.resultData.Data, function (index, res) {
                                        debugger;
                                      /*  var item = $('#calendar').fullCalendar('clientEvents', res.id);
                                        if (item.length > 0) {
                                            item[0].title = res.title;
                                            item[0].id = res.id;
                                            item[0].description = res.description;
                                            item[0].resourceId = res.resourceId;
                                            $('#calendar').fullCalendar('addEventSource', item[0]);
                                        }
                                        else*/
                                            newEvents.push(res);
                                    });
                                    if (newEvents)
                                    $('#calendar').fullCalendar('addEventSource', newEvents);
                                }

                                $('#txtIsEditSubmitButtonClicked').val('false');
                            },
                            async: true,
                            error: function (error) {
                                $('#txtIsEditSubmitButtonClicked').val('false');
                            }
                        });
                    }
                    else {
                        $('#txtIsEditSubmitButtonClicked').val('false');
                        //prevent form submission
                        var htmlMessage = "<ul>";
                        jQuery.each(result.resultData.message, function (index, messageItem) {
                            htmlMessage = htmlMessage + "<li>" + messageItem + "</li>";
                        });
                        htmlMessage = htmlMessage + "</ul>";
                        $('#lblEditAvailabilityMessage').html(htmlMessage);
                        return false;
                    }
                },
                async: true,
                error: function (error) {
                }
            });
            if (isSuccess == false) {
                event.preventDefault();
            }
        }
    });
////////////////end, Drag and Drop Event handler/////////////////////////
});

//Read just sizing after font load
$(window).on('load', function () {
$('#calendar').fullCalendar('render');
});

$(document).ready(function () {

///////
$('#txtIsActivityCheckInSubmitButtonClicked').val('false');
$('#txtIsActivityAuthorizationSubmitButtonClicked').val('false');
$('#txtIsActivityRampOutSubmitButtonClicked').val('false');
$('#txtIsActivityRampInSubmitButtonClicked').val('false');
$('#txtIsActivityFlightLogSubmitButtonClicked').val('false');
///////

var currentDate = getDate(new Date());
var currentTime = getTime(new Date());
//var currentDate = getDate(new Date('3/4/2017'));
//var currentTime = getTime(new Date('3/4/2017'));
debugger;
$('#txtEditBriefingStartingTime').val(currentDate + ' ' + currentTime);
$('#txtEditDebriefingStartingTime').val(currentDate + ' ' + currentTime);

$('#txtAddBriefingStartingTime').val(currentDate + ' ' + currentTime);
$('#txtAddDebriefingStartingTime').val(currentDate + ' ' + currentTime);
//txtAddBriefingStartingTime,txtAddDebriefingStartingTime

$(".customDateTimePicker").datetimepicker({
format: "mm/dd/yyyy hh:ii P",
autoclose: true,
todayBtn: true,
startDate: new Date(),
showMeridian: true
});

$('#txtLessonType').val('FTD');
@{
if (ViewBag.BatchClassId != null) {
<text>

PopulateTraineesOfTheSelectedBatchClass('@ViewBag.BatchClassId', '@ViewBag.LessonType');

$('#dpdScheduleBatchClass').val('@ViewBag.BatchClassId');
$('#txtEditBatchClassId').val('@ViewBag.BatchClassId');
$('#txtIsEditDragAndDropBatchClassId').val('@ViewBag.BatchClassId');
</text>
ViewBag.BatchClassId = null;
}
}

$('#PTSHtmlBodyTag').addClass("sidebar-collapse");

$('#txtIsEditSubmitButtonClicked').val('false');
$('#txtIsEditDragAndDropSubmitButtonClicked').val('false');

//$('#txtIsAddSubmitButtonClicked').val('false');
//$('#txtDragAndDropTraineeIsAddSubmitButtonClicked').val('false');

$('#txtCustomDebriefing').val('false');
$('#txtCustomBriefing').val('false');

$('#txtDragAndDropTraineeCustomBriefing').val('false');
$('#txtDragAndDropTraineeCustomDebriefing').val('false');

$('#txtEditCustomDebriefing').val('false');
$('#txtEditCustomBriefing').val('false');

$('#txtDragCustomDebriefing').val('false');
$('#txtDragCustomBriefing').val('false');
//Initialize number of row in Trainee Lesson Association
var count = 1;
$('#txtNumberOfTraineeRowLessonAdded').val(count);
count = 0;
$('#txtNumberOfTraineeLessonRowRemoved').val(count);

//Initialize defualt values and setting
$('#txtBriefingTime').val("false");
$('#txtDebriefingTime').val("false");

$('#txtIsReschedule').val('false');
$('.PTSMSDatepicker').datepicker({
autoclose: true,
todayHighlight: true,
startDate: new Date()
});

//Timepicker
    $("#txtAddStartingTime,#txtTimeForUpdate,#txtEditStartingTime,#txtAddBriefingStartingTime,#txtAddDebriefingStartingTime,#txtDragBriefingStartingTime,#txtDragDebriefingStartingTime,#txtAddDragAndDropTraineeStartingTime,#txtAddDragAndDropTraineeBriefingStartingTime,#txtAddDragAndDropTraineeDebriefingStartingTime").timepicker({
showInputs: false,
//showMeridian: false,
minuteStep: 5
});


@*@{
if (ViewBag.FTDAndFlyingScheduleMessage != null)
{
<text> bootbox.alert('@ViewBag.FTDAndFlyingScheduleMessage');
</text>
ViewBag.FTDAndFlyingScheduleMessage = null;
}
}*@

var isSubmit = false;

//Disable Batch Class dropdown list as long as Equipment type is unselected.
$("#dpdAddBatchClass").attr("disabled", "disabled");

    $('body').on('click', "#btnAddEvent", function () {
//if ($('#txtIsAddSubmitButtonClicked').val() == "false") {
//Collect all data
var equipmentId = $('#txtEquipmentIdHide').val();
var date = $('#txtAddDateHide').val();
var time = $('#txtAddStartingTime').val();
var instructorId = $('#dpdAddInstructor').val();

var briefingTimeId = $('#dpdBriefingTime').val();
var debriefingTimeId = $('#dpdDebriefingTime').val();
var isReschedule = $('#txtIsReschedule').val();
var fTDAndFlyingScheduleId = 0;
var batchClassId = 0;

var addedRowCounter = parseInt($('#txtNumberOfTraineeRowLessonAdded').val());
var removedRowCounter = parseInt($('#txtNumberOfTraineeLessonRowRemoved').val());
var rowCounter = addedRowCounter + removedRowCounter;

//Collect Trainee-Lesson association
var traineeLessonList = '';
for (var i = 1; i <= rowCounter; i++) {
//Useful if any of the tarinee lesson row is removed in between
if ($('#dpdAddTrainee' + i).val() != "" && $('#dpdAddTrainee' + i).val() != null && $('#dpdAddLesson' + i).val() != "" && $('#dpdAddLesson' + i).val() != null) {
    traineeLessonList = traineeLessonList + $('#dpdAddTrainee' + i).val() + "-" + $('#dpdAddLesson' + i).val() + "~";
}
else {
    //alert('Row (trainee Lesson association) at this Index at ' + i + ' has removed');
}
}

$('#txtTraineeLesson').val(traineeLessonList);
//IsTraineeInstructorAndEquipmentFeeBriefingAndDebriefingTime(string date, string time, int instructorId, string traineeLesson, int equipmentId, string briefingtime, string debriefingTime,
//int fTDAndFlyingScheduleId, string isReschedule,string isCustomBriefingTime,string isCustomDebriengTime,string briefingStartingTime, string briefingEndingTime, string debriefingStartTime, string debriefingEndingtime)

////////////////Custom Briefing//////////////////////////
var isCustomBriefingTime = $('#txtCustomBriefing').val();
var isCustomDebriefingTime = $('#txtCustomDebriefing').val();
var briefingStartingTime = $('#txtAddBriefingStartingTime').val();
var debriefingStartingTime = $('#txtAddDebriefingStartingTime').val();
var lessonType = $('#txtLessonType').val();
////////////////Custom Debriefing ///////////////////////

var postData = {
'date': date,
'time': time,
'instructorId': instructorId,
'traineeLesson': traineeLessonList,
'equipmentId': equipmentId,
'briefingtime': briefingTimeId,
'debriefingTime': debriefingTimeId,
'fTDAndFlyingScheduleId': fTDAndFlyingScheduleId,
'isReschedule': isReschedule,
'isCustomBriefingTime': isCustomBriefingTime,
'isCustomDebriengTime': isCustomDebriefingTime,
'briefingStartingTime': briefingStartingTime,
'debriefingStartTime': debriefingStartingTime,
'lessonType': lessonType
};

var isSuccess = false;
$.ajax({
url: "/Scheduler/IsTraineeInstructorAndEquipmentFeeBriefingAndDebriefingTime",
data: postData,
type: 'POST',
    success: function (result) {
        debugger;
     postData = {
        'date': date,
        'StartingTime': StartingTime,
        'InstructorId': instructorId,
        'TraineeLessonId': traineeLessonList,
        'Equipmentid': equipmentId,
        'briefingTimeId': briefingTimeId,
        'debriefingTimeId': debriefingTimeId,
        'fTDAndFlyingScheduleId': fTDAndFlyingScheduleId,
        'isReschedule': isReschedule,
        'isCustomBriefingTime': isCustomBriefingTime,
        'isCustomDebriefingTime': isCustomDebriefingTime,
        'briefingStartingTime': briefingStartingTime,
        'debriefingStartingTime': debriefingStartingTime,
        'lessonType': lessonType,
        'batchClassId': batchClassId,
        'rescheduledReasonId': rescheduledReasonId
    };
    if (result.resultData.isSuccess) {
        Url = "/Scheduler/AddNewTraineeLessonSchedule";
        $.ajax({
            url: Url,
            data: postData,
            type: 'POST',
            success: function (result) {

                $('#InformationContainer').removeClass('hide');
                if (result.hasList) {
                    jQuery.each(result.resultData.Data, function (index, res) {
                        var item = $('#calendar').fullCalendar('clientEvents', res.id);
                        if (item.length < 1)
                            newEvents.push(res);
                    });
                    debugger;
                    $('#calendar').fullCalendar('addEventSource', newEvents);
                    if (result.isSuccessAdd) {
                        $('#AddingSuccessMessageContainer').removeClass('hide');
                        $('#AddSuccessMessage').html("You have successfuly added the schedule.");
                    }
                    else {
                        $('#AddingErrorMessageContainer').removeClass('hide');
                        $('#AddFailMessage').html("Scheduling completed unsuccessfully!");
                    }
                }


            },
            async: true,
            error: function (error) {
            }
        });

        //var SaveUrl = "/Scheduler/AddNewTraineeLessonSchedule";
        //SaveUrl = SaveUrl + "?date=" + date + "&StartingTime=" + time + "&Equipmentid=" + equipmentId + "&TraineeLessonId=" + traineeLessonList + "&InstructorId=" + instructorId
        //+ "&isCustomBriefingTime=" + isCustomBriefingTime + "&isCustomDebriefingTime=" + isCustomDebriefingTime + "&briefingStartingTime=" + briefingStartingTime + "&debriefingStartingTime=" + debriefingStartingTime + "&briefingTimeId=" + briefingTimeId + "&debriefingTimeId=" + debriefingTimeId + "&batchClassId=" + batchClassId + "&lessonType=" + lessonType;

        //location.href = SaveUrl;
    }
    else {
        //prevent form submission
        // $('#txtIsAddSubmitButtonClicked').val('false');
        var htmlMessage = "<ul>";
        jQuery.each(result.resultData.message, function (index, messageItem) {
            htmlMessage = htmlMessage + "<li>" + messageItem + "</li>";
        });
        htmlMessage = htmlMessage + "</ul>";
        $('#lblAddAvailabilityMessage').html(htmlMessage);
    }
},
async: true,
error: function () {
}
});
//if (isSuccess == false) {
//    event.preventDefault();
//}
//}
});
    $('body').on('click', "#btnAddDragAndDropTraineeEvent", function (event) {

        event.preventDefault();


        //Collect all data
        var equipmentId = $('#txtDragAndDropTraineeEquipmentIdHide').val();
        var date = $('#txtAddDragAndDropTraineeDateHide').val();
        var time = $('#txtAddDragAndDropTraineeStartingTime').val();
        var instructorId = $('#dpdAddDragAndDropInstructor').val();

        var briefingTimeId = $('#dpdDragAndDropTraineeBriefingTime').val();
        var debriefingTimeId = $('#dpdDragAndDropTraineeDebriefingTime').val();
        var isReschedule = 'false'; //$('#txtIsReschedule').val();
        var fTDAndFlyingScheduleId = 0;
        var batchClassId = $('#dpdScheduleBatchClass').val();
        var rescheduledReasonId = $('#RescheduleReasonId').val();



        //Collect Trainee-Lesson association
       // var traineeLessonList = $('#txtDragAndDropTraineeTraineeIdHide').val() + "-" + $('#dpdAddDragAndDropTraineeLesson').val() + "~";

        var traineeLessonList = '';
        var res;
        var foo = $('#dpdAddDragAndDropTrainees').val();
        $(foo).each(function (i, sel)
        {
            if (traineeLessonList)
                traineeLessonList = traineeLessonList + '~' + sel + "-" + $('#dpdAddDragAndDropTraineeLesson').val();
            else
                traineeLessonList = sel + "-" + $('#dpdAddDragAndDropTraineeLesson').val();
        });
        $('#txtDragAndDropTraineeTraineeLesson').val(traineeLessonList);
        //IsTraineeInstructorAndEquipmentFeeBriefingAndDebriefingTime(string date, string time, int instructorId, string traineeLesson, int equipmentId, string briefingtime, string debriefingTime,
        //int fTDAndFlyingScheduleId, string isReschedule,string isCustomBriefingTime,string isCustomDebriengTime,string briefingStartingTime, string briefingEndingTime, string debriefingStartTime, string debriefingEndingtime)

        ////////////////Custom Briefing//////////////////////////
        var isCustomBriefingTime = $('#txtDragAndDropTraineeCustomBriefing').val();
        var isCustomDebriefingTime = $('#txtDragAndDropTraineeCustomDebriefing').val();
        var briefingStartingTime = $('#txtAddDragAndDropTraineeBriefingStartingTime').val();
        var debriefingStartingTime = $('#txtAddDragAndDropTraineeDebriefingStartingTime').val();
        var lessonType = $('#txtLessonType').val();

        ////////////////Custom Debriefing ///////////////////////


        var postData = {
            'date': date,
            'time': time,
            'instructorId': instructorId,
            'traineeLesson': traineeLessonList,
            'equipmentId': equipmentId,
            'briefingtime': briefingTimeId,
            'debriefingTime': debriefingTimeId,
            'fTDAndFlyingScheduleId': fTDAndFlyingScheduleId,
            'isReschedule': isReschedule,
            'isCustomBriefingTime': isCustomBriefingTime,
            'isCustomDebriengTime': isCustomDebriefingTime,
            'briefingStartingTime': briefingStartingTime,
            'debriefingStartTime': debriefingStartingTime,
            'EventApplyingType': 'Lesson'
        };

        $.ajax({
            url: "/Scheduler/IsTraineeInstructorAndEquipmentFeeBriefingAndDebriefingTime",
            data: postData,
            type: 'POST',
            success: function (result) {
                debugger;
                postData = {
                    'date': date,
                    'StartingTime': time,
                    'InstructorId': instructorId,
                    'TraineeLessonId': traineeLessonList,
                    'Equipmentid': equipmentId,
                    'briefingTimeId': briefingTimeId,
                    'debriefingTimeId': debriefingTimeId,
                    'fTDAndFlyingScheduleId': fTDAndFlyingScheduleId,
                    'isReschedule': isReschedule,
                    'isCustomBriefingTime': isCustomBriefingTime,
                    'isCustomDebriefingTime': isCustomDebriefingTime,
                    'briefingStartingTime': briefingStartingTime,
                    'debriefingStartingTime': debriefingStartingTime,
                    'lessonType': lessonType,
                    'batchClassId': batchClassId,
                    'rescheduledReasonId': rescheduledReasonId
                };
                if (result.resultData.isSuccess) {
                    debugger;
                    Url = "/Scheduler/AddNewTraineeLessonSchedule";
                    $.ajax({
                        url: Url,
                        data: postData,
                        type: 'POST',
                        success: function (result) {

                            var newEvents = new Array();
                            if (result.hasList) {
                                jQuery.each(result.resultData.Data, function (index, res) {
                                    var item = $('#calendar').fullCalendar('clientEvents', res.id);
                                    if (item.length<1)
                                        newEvents.push(res);
                                });
                                debugger;
                                $('#calendar').fullCalendar('addEventSource', newEvents);
                                if (result.isSuccessAdd) {
                                    $('#DragdropAddSuccessMessageTab').removeClass('hide');
                                    $('#DragdropAddSuccessMessage').html(result.message);
                                }
                                else {
                                    $('#DragdropAddFailMessageTab').removeClass('hide');
                                    $('#DragdropAddFailMessage').html(result.message);
                                }
                            }
                        },
                        async: true,
                        error: function (error) {
                        }
                    });
                    //var SaveUrl = "/Scheduler/AddNewTraineeLessonSchedule";
                    //SaveUrl = SaveUrl + "?date=" + date + "&StartingTime=" + time + "&Equipmentid=" + equipmentId + "&TraineeLessonId=" + traineeLessonList + "&InstructorId=" + instructorId
                    //+ "&isCustomBriefingTime=" + isCustomBriefingTime + "&isCustomDebriefingTime=" + isCustomDebriefingTime + "&briefingStartingTime=" + briefingStartingTime + "&debriefingStartingTime=" + debriefingStartingTime + "&briefingTimeId=" + briefingTimeId + "&debriefingTimeId=" + debriefingTimeId + "&batchClassId=" + batchClassId + "&lessonType=" + lessonType + "&rescheduledReasonId=" + rescheduledReasonId;

                    //location.href = SaveUrl;
                }
                else {
                    //prevent form submission
                    var htmlMessage = "<ul>";
                    jQuery.each(result.resultData.message, function (index, messageItem) {
                        htmlMessage = htmlMessage + "<li>" + messageItem + "</li>";
                    });
                    htmlMessage = htmlMessage + "</ul>";
                    $('#lblAddScheduleByDragAndDropTraineeMessage').html(htmlMessage);
                }
            },
            async: true,
            error: function () {
            }
        });
    });
//Event handler to update schedule event

    $('body').on('click', "#btnEditLesson", function () {
        debugger;
        var LessonId = $('#dpdEditLesson').val();
        var ScheduleID = $('#txtDragAndDropLessonIdHide').val();
        var Url = "/Scheduler/UpdateLesson";
        var postData = {
            'ScheduleID': ScheduleID,
            'LessonId': LessonId
        };
        $.ajax({
            url: Url,
            type: 'POST',
            data: postData,
            success: function (result) {
                if (result.hasList) {
                    debugger;
                    $('#InformationContainerEditLesson').removeClass('hide');
                    $('#EditMessageContainerSuccessLesson').removeClass('hide');
                    $('#editMessageSuccessLesson').html("You have successfuly changed a trainee for the schedule.");

                    jQuery.each(result.resultData, function (index, res) {
                        var item = $('#calendar').fullCalendar('clientEvents', res.EventID);
                        item[0].title = res.Title;
                        item[0].id = res.EventID;
                        item[0].description = res.Description;
                        debugger;
                        $('#calendar').fullCalendar('addEventSource', item[0]);
                    });

                }
            },
            error: function () {
            }
        });
    });
    $('body').on('click', "#btnEditTrainee", function () {
        $('#InformationLoading').removeClass('hide');
        $('#InformationContainerEdit').addClass('hide');
        var batchClassId = $("#dpdEditBatchClass").val();
        var ScheduleID = $('#txtDragAndDropLessonIdHide').val();
        var EquipmentID = $('#txtDragAndDropTraineeEquipmentIdHide').val();
        var traineeID = $("#dpdEditTrainee").val();

        $('#txtfylingAndFTDScheduleIdEdit').val(ScheduleID);
        debugger;
        if (traineeID != "" && ScheduleID != "") {
            var Url = "/Scheduler/UpdateTrainee";
            var postData = {
                'ScheduleID': ScheduleID,
                'traineeID': traineeID
            };
            $.ajax({
                url: Url,
                type: 'POST',
                data: postData,
                success: function (result) {

                    if (result.hasList) {
                        jQuery.each(result.resultData, function (index, res) {
                            var item = $('#calendar').fullCalendar('clientEvents', res.EventID);
                            item[0].title = res.Title;
                            item[0].id = res.EventID;
                            item[0].description = res.Description;
                            $('#calendar').fullCalendar('addEventSource', item[0]);
                        });
                        $('#InformationContainerEdit').removeClass('hide');
                        $('#EditMessageContainerSuccess').removeClass('hide');
                        $('#editMessageSuccess').html("You have successfuly changed a trainee for the schedule.");
                        $('#InformationLoading').addClass('hide');
                    }
                    $('#InformationLoading').addClass('hide');
                },
                error: function () {
                    $('#InformationLoading').addClass('hide');
                }
            });
            //$("#btnEditTrainee").submit();
        }
    });



//$('.FTDAndGFSchedulingContainer').on("change", "#dpdEditInstructor", function () {

////EditBriefingAndDebriefingMessageContainer,editBriefingMessage,editDebriefingMessage
//$('#EditBriefingAndDebriefingMessageContainer').addClass('hide');
//var instructorId = $('#dpdEditInstructor').val();

//if (instructorId != "") {

//$('#lblEditAvailabilityMessage').html('');

////Get data to be posted
//var date = $('#txtEditDate').val();
//var time = $('#txtEditStartingTime').val();
//var instructorId = $('#dpdEditInstructor').val();
//var equipmentId = $('#dpdEditEquipment').val();
//var traineeLesson = $('#txtEditTraineeId').val() + '-' + $('#txtEditLessonId').val() + '~';

////GetBriefingAndDebriefing(string date, string time, int instructorId, int equipmentId, string traineeLesson)
//var Url = "/Scheduler/GetBriefingAndDebriefing";

//var postData = {
//    'date': date,
//    'time': time,
//    'instructorId': instructorId,
//    'equipmentId': equipmentId,
//    'traineeLesson': traineeLesson
//};


////Get Briefing And Debriefing
//$.ajax({
//    url: Url,
//    type: 'POST',
//    data: postData,
//    success: function (result) {

//        $('#dpdEditBriefingTime').empty();
//        $('#dpdEditDebriefingTime').empty();
//        $('#editBriefingMessage').html('');
//        $('#editDebriefingMessage').html('');

//        if (result.resultData.Briefing.length > 0) {

//            //And Initialize the first/defualt option for all of those elements
//            $('#dpdEditBriefingTime').append($('<option>', {
//                value: '',
//                text: '--Select Briefing Time--'
//            }));
//            jQuery.each(result.resultData.Briefing, function (index, BriefingItem) {
//                $('#dpdEditBriefingTime').append($('<option>', {
//                    value: BriefingItem.Id + '',
//                    text: BriefingItem.Name + ''
//                }));
//            });
//        }
//        else {
//            //EditBriefingAndDebriefingMessageContainer,editBriefingMessage,editDebriefingMessage
//            $('#EditBriefingAndDebriefingMessageContainer').removeClass('hide');
//            $('#editBriefingMessage').html('There is no briefing time to share. Briefing time will be taken an hour before the selected lesson/s started.');

//            $('#dpdEditBriefingTime').append($('<option>', {
//                value: '',
//                text: 'Defualt Briefing Time'
//            }));
//        }

//        if (result.resultData.Debriefing.length > 0) {

//            //And Initialize the first/defualt option for all of those elements
//            $('#dpdEditDebriefingTime').append($('<option>', {
//                value: '',
//                text: '--Select Debriefing Time--'
//            }));

//            jQuery.each(result.resultData.Debriefing, function (index, DebriefingItem) {
//                $('#dpdEditDebriefingTime').append($('<option>', {
//                    value: DebriefingItem.Id + '',
//                    text: DebriefingItem.Name + ''
//                }));
//            });
//        }
//        else {
//            $('#EditBriefingAndDebriefingMessageContainer').removeClass('hide');
//            $('#editDebriefingMessage').html('There is no debriefing time to share. Debriefing time will be taken an hour after the selected lesson/s finished.');
//            $('#dpdEditDebriefingTime').append($('<option>', {
//                value: '',
//                text: 'Defualt Debriefing Time'
//            }));
//        }
//    },
//    error: function () {
//    }
//});

//}
//else {
//$('#dpdEditBriefingTime').empty();

////And Initialize the first/defualt option for all of those elements
//$('#dpdEditBriefingTime').append($('<option>', {
//    value: '',
//    text: 'Select Briefing Time'
//}));

//$('#dpdEditDebriefingTime').empty();

////And Initialize the first/defualt option for all of those elements
//$('#dpdEditDebriefingTime').append($('<option>', {
//    value: '',
//    text: 'Select Debriefing Time'
//}));
//}
//});

    $('.FTDAndGFSchedulingContainer').on("change", "#txtDateForUpdate", function () {
        debugger;
        var fylingAndFTDScheduleId = $('#txtEventID').text();
        var date = $('#txtDateForUpdate').val();
        var time = $('#txtTimeForUpdate').val();
        
        var Url = "/Scheduler/GetFreeInstructors";

        var freeResourcePostData = {
            'flyingFTDScheduleId': fylingAndFTDScheduleId,
            'date': date,
            'time': time
        };

        //Get other equipment to select from
        $.ajax({
            url: Url,
            type: 'POST',
            data: freeResourcePostData,
            success: function (result) {
              
                var EditInstructorDropDown = $('#dpdEditInstructor');
                EditInstructorDropDown.empty();

                $('#dpdEditInstructor').append($('<option>', {
                    value: '',
                    text: '--Select Instructor--'
                }));
              
                debugger;
                jQuery.each(result.resultData, function (index, Instructor) {

                    $('#dpdEditInstructor').append($('<option>', {
                        value: Instructor.Id,
                        text: Instructor.Name
                    }));

                });
            },
            error: function () {
            }
        });
    });
//txtEditStartingTime,txtEditDate,PTSMSDatepicker


//$('#txtEditStartingTime').change(function () {
//    $('.Search-Equipment').trigger('click');
//});
    
    $('#txtTimeForUpdate').timepicker().on('hide.timepicker', function (e) {
        var fylingAndFTDScheduleId = $('#txtEventID').text();
        var date = $('#txtDateForUpdate').val();
        var time = $('#txtTimeForUpdate').val();
        var Url = "/Scheduler/GetFreeInstructors";

        var freeResourcePostData = {
            'flyingFTDScheduleId': fylingAndFTDScheduleId,
            'date': date,
            'time': time
        };

        //Get other equipment to select from
        $.ajax({
            url: Url,
            type: 'POST',
            data: freeResourcePostData,
            success: function (result) {

                var EditInstructorDropDown = $('#dpdEditInstructor');
                EditInstructorDropDown.empty();

                $('#dpdEditInstructor').append($('<option>', {
                    value: '',
                    text: '--Select Instructor--'
                }));
                // new
                debugger;
                jQuery.each(result.resultData, function (index, Instructor) {

                    $('#dpdEditInstructor').append($('<option>', {
                        value: Instructor.Id,
                        text: Instructor.Name
                    }));

                });
            }
        });
    });
$('#txtEditStartingTime').timepicker().on('hide.timepicker', function (e) {
$('.Search-Equipment').trigger('click');
});
//$('#txtEditStartingTime').timepicker().on('changeTime.timepicker', function (e) {

//    alert('txtEditStartingTime');
//});

//$('.PTSMSDatepicker').datepicker().on('changeDate', function (ev) {
////Functionality to be called whenever the date is changed
//$('.Search-Equipment').trigger('click');
//});


//$('#EditScheduledEventModel').on('shown.bs.modal', function () {
//    alert('Show');
//    $("#EditScheduledEventModel").removeData('bs.modal');
//});

// $('#EditScheduledEventModel').on('hidden.bs.modal', function (e) {
// $(this).find("#evaluation-container,#flightLog-container").val('').end();
//$('#evaluation-container').empty();
//$('#flightLog-container').empty();
//$(this).removeData('bs.modal');
//});

$('#ckbIsReschedule').on('click', function (e) {
if ($(this).prop("checked") == true) {
$('#txtIsReschedule').val('true');
}
else {
$('#txtIsReschedule').val('false');
}
});

$('a[data-toggle="tab"]').on('click', function (e) {

//EvaluationItemContainer
// $('#evaluation-container > .EvaluationItemContainer:last').remove();
$('#lblEditAvailabilityMessage').html('');

var lessonId = $('#txtEditLessonId').val();
var traineeId = $('#txtEditTraineeId').val();
var sequence = $('#txtSequence').val();

var flyingFTDScheduleId = $('#txtEventID').text();

var target = $(e.target).attr("href");
if ((target == '#evaluation_tab')) {
try {
    //Block of code to try

    //Check whether EVALUATION ITEMS has been generated for TraineeLesson
    $('#myEditModalLabel').html('Evaluation Template');
    $.ajax({
        url: "/TraineeEvaluationTemplate/IsTraineeLessonHasEvaluationItem",
        data: {
            'traineeId': traineeId,
            'lessonId': lessonId,
            'sequence': sequence,
            'flyingFTDScheduleId': flyingFTDScheduleId
        },
        type: 'POST',
        success: function (result) {

            if (result.IsThereEvaluationItem) {
                PopulateEvaluationTemplate(traineeId, lessonId, sequence);
            }
            else {

                //Enable Generate Evaluation Item BUTTON
                var htmlGUIData = '<div class=""> <div class="alert alert-warning alert-dismissible">' +
                    '<button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>' +
                    '<h4><i class="icon fa fa-warning"></i> Alert!</h4>' + '<h5>No evaluation item has been generated so far. Do you want to generate now?</h5>' +
                    '</div>' + '<button class="btn btn-sm btn-info" id="btnGenerateEvaluationItem" name="btnGenerateEvaluationItem"> Generate Evaluation Item </button> </div>';
                $('#evaluation-container').html(htmlGUIData);
            }
        },
        error: function () {
        }
    });
}
catch (err) {
    //Block of code to handle errors
    alert('Error has occured');
}
}

if ((target == '#flightLog_tab')) {
$('#myEditModalLabel').html('Flight log Record.');
var flyingFTDScheduleId = $('#txtEventID').text();
var url = "/FlightLogs/CreateFlightLogPartialView";

url = url + '?flyingFTDScheduleId=' + flyingFTDScheduleId;
$.get(url, function (data) {
    $('#flightLog-container').html(data);
});
}
if ((target == '#update_tab')) {
    $('#myEditModalLabel').html('Schedule Update.');
    $('#InformationContainerEdit').addClass('hide');
    $('#EditBriefingAndDebriefingSuccessContainer').addClass('hide');
    $('#EditBriefingAndDebriefingFailContainer').addClass('hide');
}
if ((target == '#chtrainee_tab')) {
    $('#myEditModalLabel').html('Trainee Change.');
    $('#InformationContainerEdit').addClass('hide');
    $('#EditMessageContainerSuccess').addClass('hide');
    $('#EditMessageContainerFail').addClass('hide');
}
    if ((target == '#chlesson_tab')) {
        var date = $('#txtEditDate').val();
    $('#myEditModalLabel').html('Lesson Change.');
    $('#InformationContainerEdit').addClass('hide');
    debugger;
    var Url = "/Scheduler/GetTraineeLessonList";
    var traineeId = $('#txtEditTraineeId').val();
    var equipmentId= $('#txtDragAndDropTraineeEquipmentIdHide').val();
    $.ajax({
        url: Url,
        data: {
            'equipmentId': equipmentId,
            'traineeId': traineeId,
            'ActualclickedDate':date
        },
        type: 'POST',
        success: function (result) {
            if (result.hasList) {
                debugger;
                var isLessonDroppedAtExactEquipmentType = false;
                jQuery.each(result.resultData, function (index, phaseItem) {

                    var optgroup = $('<optgroup>');
                    optgroup.attr('label', phaseItem.Name);

                    jQuery.each(phaseItem.LessonList, function (index, lessonItem) {
                        if (lessonId == lessonItem.Id) {
                            isLessonDroppedAtExactEquipmentType = true;
                        }
                        var option = $("<option data-id='" + lessonItem.IsAlreadyScheduled + "'></option>");
                        option.val(lessonItem.Id);
                        option.text(lessonItem.Name);
                        optgroup.append(option);
                        $("#dpdEditLesson").append(optgroup);
                    });
                });
                if (isLessonDroppedAtExactEquipmentType) {
                    $("#dpdEditLesson").val([lessonId, ""]).trigger("change");
                }
                else {
                    $("#lblAddScheduleByDragAndDropTraineeMessage").html("The next recommended lesson type is not suitable in the equipment the lesson dropped.");
                }
                //$("#dpdAddDragAndDropTraineeLesson").multiselect('refresh'); //refresh the select here
            }
            else {
                $("#lblAddScheduleByDragAndDropTraineeMessage").html("There is no available lesson.");
                $("#btnAddDragAndDropTraineeEvent").attr("disabled", "disabled");
            }
        },
        error: function () {
            debugger;
        }
    });

}
if ((target == '#detail_tab')) {
    $('#myEditModalLabel').html('Schedule Detail.');
    $('#InformationContainerEdit').addClass('hide');
}
if ((target == '#checkIn_tab')) {
    $('#myEditModalLabel').html('Activity Check-In.');
    $('#InformationContainerEdit').addClass('hide');

var url = "/ActivityCheckIn/CreateCheckIn";
url = url + '?flyingFTDScheduleId=' + flyingFTDScheduleId;
$.get(url, function (data) {
    $('#checkIn-container').html(data);
});
}
if ((target == '#rampOut_tab')) {
$('#myEditModalLabel').html('Activity Ramp Out.');

var url = "/ActivityRampOut/CreateRampOut";
url = url + '?flyingFTDScheduleId=' + flyingFTDScheduleId;
$.get(url, function (data) {
    $('#rampOut-container').html(data);
});
}
if ((target == '#rampIn_tab')) {
$('#myEditModalLabel').html('Activity Ramp In.');

var url = "/ActivityRampIn/CreateRampIn";
url = url + '?flyingFTDScheduleId=' + flyingFTDScheduleId;
$.get(url, function (data) {
    $('#rampIn-container').html(data);
});
    }
if ((target == '#CreateEquMent_tab')) {
    debugger;
    $('#myEquMentModalLabel').html('Equipmnet Mentainance.');
    var url = "/EquipmentMaintenances/CreateEquiMentainance";
    url = url + "?EquipmentId=" + $('#EquipmentId').val();
$.get(url, function (data) {
    $('#CreateEquMent-container').html(data);
    });


}
return true;
});

$('body').on('click', "#btnGenerateEvaluationItem", function () {
//alert('btnGenerateEvaluationItem');
var lessonId = $('#txtEditLessonId').val();
var traineeId = $('#txtEditTraineeId').val();
var sequence = $('#txtSequence').val();
//Generate Evaluation Item if it doesn't generate so far.
$.ajax({
url: "/TraineeEvaluationTemplate/PopulateEvaluationItemForTraineeLesson",
data: {
    'traineeId': traineeId,
    'lessonId': lessonId,
    'sequence': sequence
},
type: 'POST',
success: function (result) {

    if (result.IsEvaluationItemGenerated) {
        PopulateEvaluationTemplate(traineeId, lessonId, sequence);
    }
    else {
        bootbox.alert("Unable to generate Evaluation item.");
    }
},
error: function () {
}
});
});

$('body').on('click', "#btnAdd", function () {


var addedRowCounter = parseInt($('#txtNumberOfTraineeRowLessonAdded').val());
var removedRowCounter = parseInt($('#txtNumberOfTraineeLessonRowRemoved').val());
var rowCounter = addedRowCounter + removedRowCounter + 1;
var lessonId = 'dpdAddLesson' + rowCounter;
var traineeId = 'dpdAddTrainee' + rowCounter;

//hold only the exact amount of existing rows (Trainee Lesson Association)
$('#txtNumberOfTraineeRowLessonAdded').val(addedRowCounter + 1);

var rowClass = "form-group row div" + rowCounter;
var newDivElement = $("#TraineeLessonContainer");

var newFlight = "<div class='" + rowClass + "'> " +
"<div class='col-md-1'> </div><div class='col-md-6'><select class='form-control input-sm select2 AddTraineeClass' type='text' data-id = '" + rowCounter + "' name='" + traineeId + "' id='" + traineeId + "' width='300' multiple='multiple' style='width: 100%;'></select>"
+ "</div><div class='col-md-4'>" + "<select class='form-control input-sm select2 AddLessonClass' type='text' data-id = '" + rowCounter + "' name='" + lessonId + "' id='" + lessonId + "' width='300' multiple='multiple' style='width: 100%;'></select>"
+ "</div><div class='col-md-1'><button type='button' class='btn btn-sm btn-warning btn-flat RemoveButton' data-id = '" + rowCounter + "' id='btnRemove'" + rowCounter + " name='btnRemove''" + rowCounter + ">" +
"<i class='fa fa-minus'></i></button></div></div>";

newDivElement = $(newFlight).attr({ id: "TraineeLessonContainer" });
newDivElement.appendTo("#TraineeLessonContainer");

//Copy the dropdown options into the newly added dropdown's
$('#dpdAddTrainee1 option').clone().appendTo('#' + traineeId);

//Make dynamically added dropdown multiselect in order to have sub-string searching capability
$("#" + lessonId).select2({
maximumSelectionLength: 1
});
$("#" + traineeId).select2({
maximumSelectionLength: 1
});
$('#btnRemove').removeAttr('disabled');
});

//btnRemove
$('body').on('click', ".RemoveButton", function () {

var addedRowCounter = parseInt($('#txtNumberOfTraineeRowLessonAdded').val());
var buttonIndex = $(this).data("id");

if (addedRowCounter > 1) {
$('#TraineeLessonContainer > .div' + buttonIndex).remove();
//Substract from added Row Counter
addedRowCounter = addedRowCounter - 1;
$('#txtNumberOfTraineeRowLessonAdded').val(addedRowCounter);

//Add removed Row Counter
var removedRowCounter = parseInt($('#txtNumberOfTraineeLessonRowRemoved').val());
removedRowCounter = removedRowCounter + 1;
$('#txtNumberOfTraineeLessonRowRemoved').val(removedRowCounter);
}
});

$('body').on('click', "#chbAddBriefing", function () {
////dpdDebriefingTime,dpdBriefingTime
if ($(this).prop("checked") == true) {
$('#dpdBriefingTime').attr('disabled', true);
$('#CustomBriefingTime').removeClass('hide');
$('#txtCustomBriefing').val("true");
}
else {
$('#dpdBriefingTime').removeAttr("disabled");
$('#CustomBriefingTime').addClass('hide');
$('#txtCustomBriefing').val("false");
}
});

$('body').on('click', "#chbAddDebriefing", function () {
if ($(this).prop("checked") == true) {
$('#dpdDebriefingTime').attr('disabled', true);
$('#CustomDebriefingTime').removeClass('hide');
$('#txtCustomDebriefing').val("true");
}
else {
$('#dpdDebriefingTime').removeAttr("disabled");
$('#CustomDebriefingTime').addClass('hide');
$('#txtCustomDebriefing').val("false");
}
});


$('body').on('click', "#ckbEditBriefing", function () {
////dpdDebriefingTime,dpdBriefingTime
if ($(this).prop("checked") == true) {
$('#dpdEditBriefingTime').attr('disabled', true);
$('#CustomEditBriefingTime').removeClass('hide');
$('#txtEditCustomBriefing').val("true");
}
else {
$('#dpdEditBriefingTime').removeAttr("disabled");
$('#CustomEditBriefingTime').addClass('hide');
$('#txtEditCustomBriefing').val("false");
}
});

$('body').on('click', "#ckbEditDebriefing", function () {
if ($(this).prop("checked") == true) {
$('#dpdEditDebriefingTime').attr('disabled', true);
$('#CustomEditDebriefingTime').removeClass('hide');
$('#txtEditCustomDebriefing').val("true");
}
else {
$('#dpdEditDebriefingTime').removeAttr("disabled");
$('#CustomEditDebriefingTime').addClass('hide');
$('#txtEditCustomDebriefing').val("false");
}
});

$(".buttoGroup").click(function () {
$(".buttoGroup").removeClass('active');
$(this).toggleClass("active");

var lessonType = $(this).data("id");
$('#txtLessonType').val(lessonType);

$("#lblAddScheduleByDragAndDropTraineeMessage").html("");
$('#traineeBatchClassDiv > .eventDiv').remove();
var batchClassId = $('#dpdScheduleBatchClass').val();

//Get all trainee of the selected batch class
// GetBatchClassTrainees(int batchClassId)
if (batchClassId != "" && lessonType != "") {
PopulateTraineesOfTheSelectedBatchClass(batchClassId, lessonType);
}

});

function getDate(date) {
debugger;
if (date != null) {

var startDateTime = new Date(date.toString());
startDateTime = new Date(startDateTime - 3 * 60 * 60 * 1000);

var day = startDateTime.getDate();
var month = startDateTime.getMonth() + 1;
var year = startDateTime.getFullYear();
var extractedDate = month + '/' + day + '/' + year;

return extractedDate;
}
}

function getTime(date) {
debugger;
if (date != null) {

var startDateTime = new Date(date.toString());
startDateTime = new Date(startDateTime - 3 * 60 * 60 * 1000);

var hour = startDateTime.getHours();
var min = startDateTime.getMinutes();
var sec = startDateTime.getSeconds();

if (hour.toString().length == 1)
    hour = "0" + hour;
if (min.toString().length == 1)
    min = "0" + min;
var time = hour + ":" + min;

return time;
}
}
});
//BEGIN, EVENT HANDLER FOR EVALUATION TEMPLATE.

function PopulateEvaluationTemplate(traineeId, lessonId, sequence) {
var url = "/Scheduler/TraineeEvaluationTemplatePartialView";
///////////////////////////////////
url = url + '?traineeId=' + traineeId + '&lessonId=' + lessonId + '&sequence=' + sequence;

$.get(url, function (data) {
$('#evaluation-container').html(data);
//var date = $('#txtEditDate').val();
//$('#txtEvaluationDate').val(date);
});
}


//Triggered whenever checkbox is checked
$('.FTDAndGFSchedulingContainer').on("click", ".grade-CheckBox", function (event) {

var Ids = $(this).val();
var IdsArray = Ids.split('~');

var categoryId = IdsArray[0];
var ItemId = IdsArray[1];
var ScoreLevelId = IdsArray[2];
var ItemClass = "Category" + categoryId + "-Item" + ItemId;

var isChecked = false;
if ($('#' + event.target.id).prop("checked") == true) {
isChecked = true;
}
$('.' + ItemClass).prop('checked', false);  // Unchecks it

if (isChecked)
$('#' + event.target.id).prop('checked', true);
else
$('#' + event.target.id).prop('checked', false);

var ButtonGroupClass = "labelCategory" + categoryId + "Item" + ItemId;
var ClickedButtonId = ButtonGroupClass + ScoreLevelId;

$('.' + ButtonGroupClass).removeClass("btn-primary btn-default").addClass("btn-default");

if (isChecked)
$('#' + ClickedButtonId).removeClass("btn-primary btn-default").addClass("btn-primary");
else
$('#' + ClickedButtonId).removeClass("btn-primary btn-default").addClass("btn-default");
});

//Triggered whenever Evaluation submit button is clicked
$('.FTDAndGFSchedulingContainer').on("submit", "#btnEvaluationTemplate", function (event) {
    debugger;
//collect and add checked value into a single space / text field
$('#EvaluationItem').val('');
    var EvaluationItemList = '';
  
//Get value to be posted
var overAllGradeId = $('#OverallGradeId').val();

var traineeId = $('#txtEditTraineeId').val();
var lessonId = $('#txtEditLessonId').val();
var remark = $('#txtRemark').val();
  
var fylingFTDScheduleId = $('#txtfylingAndFTDScheduleId').val();
var TimeIn = $('#txtTimeIn').val();
var TimeOut = $('#txtTimeOut').val();
var FlightTime = $('#txtFliTime').val();
var FlightDate = $('#txtEditDate').val();
var categoryId = '';
var ItemId = '';
var ScoreLevelId = '';
var numberOfClickedEvaluationItems = 0;

$('#evaluation-container :checked').each(function () {
numberOfClickedEvaluationItems = numberOfClickedEvaluationItems + 1;
var Ids = $(this).val();
var IdsArray = Ids.split('~');

categoryId = IdsArray[0];
ItemId = IdsArray[1];
ScoreLevelId = IdsArray[2];
EvaluationItemList = EvaluationItemList + ItemId + "-" + ScoreLevelId + "~";
//alert('categoryId = ' + categoryId + ' ItemId=' + ItemId + ' ScoreLevelId=' + ScoreLevelId);
    });
   var evaluationData= {
       'evaluationTemplateItems': EvaluationItemList,
       'overAllGradeId': overAllGradeId,
       'traineeId': traineeId,
       'lessonId': lessonId,
       'remark': remark,
       'fylingFTDScheduleId': fylingFTDScheduleId,
       'TimeIn': TimeIn,
       'TimeOut': TimeOut,
       'FlightTime': FlightTime,
       'FlightDate': FlightDate,
    }
    bootbox.confirm("You did not evaluate all items. Are you sure you want to <b>continue</b>?", function (result) {
        if (result) {

            $.ajax({
                url: "/TraineeEvaluationTemplate/SaveTraineeEvaluationTemplateItems",
                data: evaluationData,
                type: 'POST',
                success: function (result) {

                    if (result.IsSuccess) {
                        bootbox.alert(result.message);
                    }
                    else {
                        bootbox.alert(result.message);
                    }
                },
                error: function () {
                }
            });
        }
    });
 
var numberOfRenderedEvaluationItems = $('#txtnumberOfItems').val();

var isEvaluationSucceed = true;
event.preventDefault();
if (numberOfClickedEvaluationItems < parseInt(numberOfRenderedEvaluationItems)) {

bootbox.confirm("You did not evaluate all items. Are you sure you want to <b>continue</b>?", function (result) {
if (result) {

    var Url = "/TraineeEvaluationTemplate/SaveTraineeEvaluationTemplateItems";
    $('#EvaluationItem').val(EvaluationItemList);

    Url = Url + "?evaluationTemplateItems=" + EvaluationItemList + "&overAllGradeId=" + overAllGradeId + "&traineeId=" + traineeId + "&traineeId=" + traineeId + "&lessonId=" + lessonId + "&remark=" + remark + "&fylingFTDScheduleId=" + fylingFTDScheduleId + "&TimeIn=" + TimeIn + "&TimeOut" + TimeOut + "&FlightTime" + FlightTime + "&FlightDate" + FlightDate;
    location.href = Url;

    //jQuery.noConflict();
    $('#EditScheduledEventModel').modal('hide');
}
});
} else {
//SaveTraineeEvaluationTemplateItems(string evaluationTemplateItems, string score, string traineeId, string lessonId,string remark)

var Url = "/TraineeEvaluationTemplate/SaveTraineeEvaluationTemplateItems";
$('#EvaluationItem').val(EvaluationItemList);

    Url = Url + "?evaluationTemplateItems=" + EvaluationItemList + "&overAllGradeId=" + overAllGradeId + "&traineeId=" + traineeId + "&traineeId=" + traineeId + "&lessonId=" + lessonId + "&remark=" + remark + "&fylingFTDScheduleId=" + fylingFTDScheduleId + "&TimeIn=" + TimeIn + "&TimeOut" + TimeOut + "&FlightTime" + FlightTime + "&FlightDate" + FlightDate;
location.href = Url;

//jQuery.noConflict();
$('#EditScheduledEventModel').modal('hide');
}
});
//END, EVENT HANDLER FOR EVALUATION TEMPLATE.

//EVENT HANDLER TO GET LESSON LIST.
/*

*/
///Newly added event handler
$('.FTDAndGFSchedulingContainer').on("change", ".AddTraineeClass", function () {

//Get all lessons that trainees can learn from a specifically clicked equipment
var traineeIndex = $(this).data("id");

//Clear the drop down list
var $lessonMulti = $('#dpdAddLesson' + traineeIndex);
$lessonMulti.val(null).trigger("change");
$lessonMulti.empty();
var traineeId = $('#dpdAddTrainee' + traineeIndex).val();

if (traineeId != "" && traineeId != null) {

var date = $('#txtAddDateHide').val();
var time = $('#txtAddStartingTime').val();
var lessonId = $('#dpdAddLesson' + traineeIndex).val();
var equipmentId = $('#txtEquipmentIdHide').val();

var Url = "/Scheduler/GetTraineeLessons";

$.ajax({
url: Url,
data: {
    'date': date,
    'time': time,
    'lessonId': lessonId,
    'traineeId': traineeId,
    'equipmentId': equipmentId
},
type: 'POST',
success: function (result) {
    if (result.hasList) {

        jQuery.each(result.resultData, function (index, lnItem) {
            $('#dpdAddLesson' + traineeIndex).append($('<option>', {
                value: lnItem.Id + '',
                text: lnItem.Name + ''
            }));
        });
    }
    else {
        $("#lblAddAvailabilityMessage").html("There is no available lesson.");
        $("#btnAddEvent").attr("disabled", "disabled");
    }
},
error: function () {
}
});
}
});

function CheckTraineeAndEquipmentConstraints(lessonIndex) {
var counter1 = parseInt($('#txtNumberOfTraineeRowLessonAdded').val());


var lessonId = $('#dpdAddLesson' + lessonIndex).val();
var traineeId = $('#dpdAddTrainee' + lessonIndex).val();
var isConstraintSatisfied = false;


if (lessonId != "" && lessonId != null) {

$("#lblAddAvailabilityMessage").html("");
//Get data to be posted

var date = $('#txtAddDateHide').val();
var time = $('#txtAddStartingTime').val();
var equipmentId = $('#txtEquipmentIdHide').val();

//CheckConstraints(int equipmentId, int lessonId, string date, string time)

//Check for Equipment WORKING HOURS, DOWN TIME , RECCURING SCHEDULE and FREENESS, and check TRAINEE freeness
var EquipmentWorkingHourUrl = "/Scheduler/CheckConstraints";

var EquipmentWorkingHourData = {
'equipmentId': equipmentId,
'lessonId': lessonId, //Change into trainee id
'date': date,
'time': time,
'traineeId': traineeId
};

$.ajax({
url: EquipmentWorkingHourUrl,
type: 'POST',
data: EquipmentWorkingHourData,
success: function (result) {

    if (result.isInBetweenEquipmentWorkingHour && !result.isInBetweenEquipmentDowntime && !result.isInBetweenRecurringDowntimeSchedule && result.isEquipmentFree && result.isTraineeFree && !result.isInBetweenEquipmentMaintainanceTime) {

        isConstraintSatisfied = true;
    }
    else {
        $("#lblAddAvailabilityMessage").html(result.Message);
        $("#btnAddEvent").attr("disabled", "disabled");
        isConstraintSatisfied = false;
    }
},
async: false,
error: function () {
}
});
return isConstraintSatisfied;
}
else {
return isConstraintSatisfied;
}
}

//EVENT HANDLER TO GET INSTRUCTOR LIST. changed into AddLessonClass
$('.FTDAndGFSchedulingContainer').on("change", ".AddLessonClass", function () {

//Check trainee and equipment constraints.

var AddInstructorDropDown = $('#dpdAddInstructor');
AddInstructorDropDown.empty();

$('#dpdAddInstructor').append($('<option>', {
value: '',
text: '--Select Instructor--'
}));

var traineeIndex = $(this).data("id");
var result = CheckTraineeAndEquipmentConstraints(traineeIndex);

if (result == true) {

var addedRowCounter = parseInt($('#txtNumberOfTraineeRowLessonAdded').val());
var removedRowCounter = parseInt($('#txtNumberOfTraineeLessonRowRemoved').val());
var rowCounter = addedRowCounter + removedRowCounter;

//Check if the last traineeLesson is selected

if (rowCounter == traineeIndex) {

//get Trainee Lesson
var traineeId = $('#dpdAddTrainee' + traineeIndex).val();

if (traineeId != "" && traineeId != null) {

    $("#lblAddAvailabilityMessage").html("");

    //Collect Trainee-Lesson association
    var TraineeLessonList = '';
    for (var i = 1; i <= rowCounter; i++) {
        //Useful if any of the tarinee lesson row is removed in between
        if ($('#dpdAddTrainee' + i).val() != "" && $('#dpdAddTrainee' + i).val() != null && $('#dpdAddLesson' + i).val() != "" && $('#dpdAddLesson' + i).val() != null) {
            TraineeLessonList = TraineeLessonList + $('#dpdAddTrainee' + i).val() + "-" + $('#dpdAddLesson' + i).val() + "~";
        }
        else {
            //alert('Row (trainee Lesson association) at this Index at ' + i + ' has removed');
        }
    }

    //Get data to be posted
    var EquipmentId = $('#txtEquipmentIdHide').val();
    var date = $('#txtAddDateHide').val();
    var time = $('#txtAddStartingTime').val();
    // alert('Equipment = ' + EquipmentId + " date= " + date + " time=" + time + " traineeLesson=");
    //GetFTDandFlyingInstructors(int equipmentId, string date, string time, string traineeLesson)
    var Url = "/Scheduler/GetFTDandFlyingInstructors";

    var postData = {
        'equipmentId': EquipmentId,
        'date': date,
        'time': time,
        'traineeLesson': TraineeLessonList
    };
    //Get instructors
    $.ajax({
        url: Url,
        type: 'POST',
        data: postData,
        success: function (result) {

            if (result.hasList) {

                jQuery.each(result.resultData, function (index, InstructorItem) {
                    $('#dpdAddInstructor').append($('<option>', {
                        value: InstructorItem.Id + '',
                        text: InstructorItem.Name + ''
                    }));
                });
            }
            else {
                $("#lblAddAvailabilityMessage").html("There is no available instructor. Possible causes: " +
                    "<ul>" +
                    "<li> Instructor may not be assigned to teach the selected equipment model.</li>" +
                    "<li> You selecte Pre Solo lesson/s and there may not be available instructor that teach the previous scheduled Pre Solo lesson/s. </li>" +
                    "<li> Instructor may not be free in the specified date and time.</li>" +
                    "</ul>");

                $("#btnAddEvent").attr("disabled", "disabled");
            }
        },
        error: function () {
        }
    });
}
else {
    var AddInstructorDropDown = $('#dpdAddInstructor');
    AddInstructorDropDown.empty();

    //And Initialize the first/defualt option for all of those elements
    $('#dpdAddInstructor').append($('<option>', {
        value: '',
        text: '--Select Instructor--'
    }));
}
}
else {
//•	Execlude the first selected trainee in the second list.
/*
var lastTraineeValue = $('#dpdAddTrainee' + traineeIndex).val();

var nextTraineeIndex = traineeIndex + 1;
var nextTraineeId = '#dpdAddTrainee' + nextTraineeIndex;

$(nextTraineeId + " > option").each(function () {

    if (this.value == lastTraineeValue) {
        //$(this).attr('disabled', true);
        $(nextTraineeId + " option[value=" + this.value + "]").attr('disabled', 'disabled');
    }
    else
    {
        $(nextTraineeId + " option[value=" + this.value + "]").removeAttr('disabled');
    }
});  */
}
}
});


$('.FTDAndGFSchedulingContainer').on("change", "#dpdAddInstructor", function () {
debugger;
//dpdDebriefingTime,dpdBriefingTime
$('#BriefingAndDebriefingMessageContainer').addClass('hide');
var instructorId = $('#dpdAddInstructor').val();

if (instructorId != "") {

$("#lblAddAvailabilityMessage").html("");

//Get data to be posted
var date = $('#txtAddDateHide').val();
var time = $('#txtAddStartingTime').val();
var equipmentId = $('#txtEquipmentIdHide').val();

//Collect Trainee-Lesson association
var addedRowCounter = parseInt($('#txtNumberOfTraineeRowLessonAdded').val());
var removedRowCounter = parseInt($('#txtNumberOfTraineeLessonRowRemoved').val());
var rowCounter = addedRowCounter + removedRowCounter;
var TraineeLessonList = '';
for (var i = 1; i <= rowCounter; i++) {
//Useful if any of the tarinee lesson row is removed in between
if ($('#dpdAddTrainee' + i).val() != "" && $('#dpdAddTrainee' + i).val() != null && $('#dpdAddLesson' + i).val() != "" && $('#dpdAddLesson' + i).val() != null) {
    TraineeLessonList = TraineeLessonList + $('#dpdAddTrainee' + i).val() + "-" + $('#dpdAddLesson' + i).val() + "~";
}
else {
    //alert('Row (trainee Lesson association) at this Index at ' + i + ' has removed');
}
}
//GetBriefingAndDebriefing(string date, string time, int instructorId, int equipmentId, string traineeLesson)
var Url = "/Scheduler/GetBriefingAndDebriefing";

var postData = {
'date': date,
'time': time,
'instructorId': instructorId,
'equipmentId': equipmentId,
'traineeLesson': TraineeLessonList
};


//Get Briefing And Debriefing
$.ajax({
url: Url,
type: 'POST',
data: postData,
success: function (result) {

    $('#dpdBriefingTime').empty();
    $('#dpdDebriefingTime').empty();
    $('#BriefingMessage').html('');
    $('#DebriefingMessage').html('');
    $('#ResponceMessage').html('');
    if (result.resultData.Briefing.length > 0) {

        //And Initialize the first/defualt option for all of those elements
        $('#dpdBriefingTime').append($('<option>', {
            value: '',
            text: '--Select Briefing Time--'
        }));
    }
    else {
        //BriefingAndDebriefingMessageContainer,BriefingMessage,DebriefingMessage
        $('#BriefingAndDebriefingMessageContainer').removeClass('hide');
        $('#BriefingMessage').html('There is no briefing time to share. Briefing time will be taken an hour before the selected lesson/s started.');

        $('#dpdBriefingTime').append($('<option>', {
            value: '',
            text: 'Defualt Briefing Time'
        }));
    }
    if (result.resultData.Debriefing.length > 0) {
        //And Initialize the first/defualt option for all of those elements
        $('#dpdDebriefingTime').append($('<option>', {
            value: '',
            text: '--Select Debriefing Time--'
        }));
    }
    else {
        $('#BriefingAndDebriefingMessageContainer').removeClass('hide');
        $('#DebriefingMessage').html('There is no debriefing time to share. Debriefing time will be taken an hour after the selected lesson/s finished.');
        $('#dpdDebriefingTime').append($('<option>', {
            value: '',
            text: 'Defualt Debriefing Time'
        }));
    }
    if (result.hasList) {

        jQuery.each(result.resultData.Briefing, function (index, BriefingItem) {
            $('#dpdBriefingTime').append($('<option>', {
                value: BriefingItem.Id + '',
                text: BriefingItem.Name + ''
            }));
        });

        jQuery.each(result.resultData.Debriefing, function (index, DebriefingItem) {
            $('#dpdDebriefingTime').append($('<option>', {
                value: DebriefingItem.Id + '',
                text: DebriefingItem.Name + ''
            }));
        });
    }
    else {
        //$("#lblAddAvailabilityMessage").html("There is no available instructor. Possible causes: " +
        //    "<ul>" +
        //    "<li> Instructor may not be assigned to teach the selected equipment model.</li>" +
        //    "<li> There may not be available instructor that teach the previous pre solo lesson/s. </li>" +
        //    "<li> Instructor may not be free in the specified date and time.</li>" +
        //    "</ul>");

        //$("#btnAddEvent").attr("disabled", "disabled");
    }
},
error: function () {
}
});
//get leave and license expiry


}
else {
$('#dpdBriefingTime').empty();

//And Initialize the first/defualt option for all of those elements
$('#dpdBriefingTime').append($('<option>', {
value: '',
text: 'Has Briefing Time?'
}));

$('#dpdDebriefingTime').empty();

//And Initialize the first/defualt option for all of those elements
$('#dpdDebriefingTime').append($('<option>', {
value: '',
text: 'Has Debriefing Time?'
}));
}
});

/*
*/

//EVENT HANDLER TO GET FREE and VALID EQUIPMENT LIST.
//    $('.FTDAndGFSchedulingContainer').on("click", ".Search-Equipment", function () {
        
//$('#lblEditAvailabilityMessage').html('');
//$('#InstructionContainer').addClass('hide');
////Get data to be posted
//var fylingAndFTDScheduleId = $('#txtEventID').text();
//var date = $('#txtEditDate').val();
//var time = $('#txtEditStartingTime').val();

////alert('fylingAndFTDScheduleId = ' + fylingAndFTDScheduleId + ' date=' + date + ' time=' + time);

//if (date != "" && date != null && time != "" && time != null) {

//$("#lblEditAvailabilityMessage").html("");

////flyingFTDScheduleId, string date, string time)
//var Url = "/Scheduler/GetFreeEquipment";
////alert('fylingAndFTDScheduleId=' + fylingAndFTDScheduleId + ' date=' + date + ' time' + time);
//var postData = {
//'flyingFTDScheduleId': fylingAndFTDScheduleId,
//'date': date,
//'time': time
//};

////Check for Equipment WORKING HOURS, DOWN TIME , RECCURING SCHEDULE and FREENESS
//$("#btnEdit").removeAttr("disabled");
//isValidEquipment();

////Get other equipment to select from
//$.ajax({
//url: Url,
//type: 'POST',
//data: postData,
//success: function (result) {

//    if (result.hasList) {
//        var isEquipmentExist = false;
//        jQuery.each(result.resultData, function (index, EquipmentItem) {

//            isEquipmentExist = false;
//            $('#dpdEditEquipment option').each(function () {
//                if ($(this).val() == EquipmentItem.Id) {
//                    isEquipmentExist = true;
//                }
//            });

//            if (!isEquipmentExist) {
//                $('#dpdEditEquipment').append($('<option>', {
//                    value: EquipmentItem.Id + '',
//                    text: EquipmentItem.Name + ''
//                }));
//            }

//        });
//        $("#btnEdit").removeAttr("disabled");
//    }
//    else {
//        $("#lblEditAvailabilityMessage").html("There is no available equipment. Possible causes: <ul> <li> Equipment is busy in the entered date and time.</li> <li> Equiment certificate has expired or no equipment in the lesson category i.e ME, Cross Country. </li></ul>");
//        $("#btnEdit").attr("disabled", "disabled");
//    }
//    //$('#dpdEditEquipment').val('');
//},
//error: function () {
//}
//});
//}
//else {
//$('#lblEditAvailabilityMessage').html('Please insert value into all input fields before submiting.');
////bootbox.alert('Please insert valid input.');
//}
//});

//GET FREE AND POTENTAIL INSTRUCTORS
$('.FTDAndGFSchedulingContainer').on("change", "#dpdEditEquipment", function () {

$('#lblEditAvailabilityMessage').html('');
var fylingAndFTDScheduleId = $('#txtEventID').text();
var equipmentId = $('#dpdEditEquipment').val();
var date = $('#txtEditDate').val();
var time = $('#txtEditStartingTime').val();
var traineeId = $('#txtEditTraineeId').val();

if (equipmentId != "") {

var EquipmentReservationCheckerUrl = "/Scheduler/GetReservedDateTimes";

var postData = {
'equipmentId': equipmentId,
'date': date
};

//Begin, Get equipment reservation time
$.ajax({
url: EquipmentReservationCheckerUrl,
type: 'POST',
data: postData,
success: function (result) {

    if (result.hasList) {

        $("#UnorderEditReservedDateTimes").empty();
        jQuery.each(result.resultData, function (index, DisplayOptionTimeItem) {
            $('#InformationContainer').removeClass('hide');

            $('#UnorderEditReservedDateTimes').append($('<li>', {
                value: DisplayOptionTimeItem.Id,
                text: DisplayOptionTimeItem.Name
            }));
        });
    }
    else {
        $("#btnAddEvent").attr("disabled", "disabled");
    }
},
error: function () {
}
});
//End, Equipment Reservation Checker


//Begin, Check for Equipment WORKING HOURS, DOWN TIME , RECCURING SCHEDULE and FREENESS
var lessonId = $('#txtEditLessonId').val();

var CheckForEquipmentUrl = "/Scheduler/CheckConstraints";

var CheckForEquipmentUrlPostData = {
'equipmentId': equipmentId,
'lessonId': lessonId,
'date': date,
'time': time,
'traineeId': traineeId
};

$.ajax({
url: CheckForEquipmentUrl,
type: 'POST',
data: CheckForEquipmentUrlPostData,
success: function (result) {

    if (result.isInBetweenEquipmentWorkingHour && !result.isInBetweenEquipmentDowntime && !result.isInBetweenRecurringDowntimeSchedule && result.isEquipmentFree && result.isTraineeFree && !result.isInBetweenEquipmentMaintainanceTime) {
        $("#btnEdit").removeAttr("disabled");

        //Get free and POTENTAIL INSTRUCTORS
        var Url = "/Scheduler/GetEquipmentInstructors";

        var postData = {
            'equipmentId': equipmentId,
            'date': date,
            'time': time,
            'fylingAndFTDScheduleId': fylingAndFTDScheduleId
        };

        //Clear the existing dropdown option of Period
        var InstructorDropdown = $('#dpdEditInstructor');
        InstructorDropdown.empty();

        //Initialize the first/defualt option
        $('#dpdEditInstructor').append($('<option>', {
            value: '',
            text: 'Select Instructor'
        }));
        //Get Instructor for Specific date, time and equipment

        $.ajax({
            url: Url,
            type: 'POST',
            data: postData,
            success: function (result) {

                if (result.hasList) {

                    jQuery.each(result.resultData, function (index, InstructorItem) {
                        $('#dpdEditInstructor').append($('<option>', {
                            value: InstructorItem.Id + '',
                            text: InstructorItem.Name + ''
                        }));
                    });
                    $("#btnEdit").removeAttr("disabled");
                }
                else {
                    $("#lblEditAvailabilityMessage").html("There is no available instructor. Possible causes: <ul> <li>No instructor is assigned to teach the selected equipment model.</li> <li> Potential instructors are not free at the specified date and time </li> <li>Or if the lesson is pre solo, instructor shall be same throughout the pre solo lessons</li></ul>");
                    $("#btnEdit").attr("disabled", "disabled");
                }
            },
            error: function () {

            }
        });

    }
    else {
        $("#lblEditAvailabilityMessage").html(result.Message);
        $("#btnEdit").attr("disabled", "disabled");
    }
},
error: function () {
    bootbox.alert("Error has occured while checking constraints!.");
}
});
//End, Check for Equipment WORKING HOURS, DOWN TIME , RECCURING SCHEDULE and FREENESS
}

});
    $('.FTDAndGFSchedulingContainer').on("change", "#dpdEditBatchClass", function () {
        $('#InformationLoading').removeClass('hide');
        $('#InformationContainerEdit').addClass('hide');
var batchClassId = $("#dpdEditBatchClass").val();
var ScheduleID = $('#txtDragAndDropLessonIdHide').val();
var EquipmentID = $('#txtDragAndDropTraineeEquipmentIdHide').val();
var traineeID = $("#dpdEditTrainee").val();

$('#dpdEditTrainee').empty();
if (batchClassId != "") {
var Url = "/Scheduler/GetBatchClassTraineesForEdit";
//alert('lessonType = ' + lessonType);
var postData = {
'batchClassId': batchClassId,
'ScheduleID': ScheduleID,
};

//Begin, Get equipment reservation time
$.ajax({
url: Url,
type: 'POST',
data: postData,
success: function (result) {
    debugger;

    if (result.hasList) {
        unAssigned = result.resultData;
        jQuery.each(unAssigned, function (index, trainee) {

            $('#dpdEditTrainee').append($('<option>', {
                value: trainee.Id + '',
                text: trainee.Name + ''
            }));
        });
        $('#InformationLoading').addClass('hide');
    }
    else if (result.resultData === 'not-new')
    {
        debugger;
        $('#InformationContainerEdit').removeClass('hide');
        $('#EditMessageContainerError').removeClass('hide');
        $('#editMessageError').html("You can not change a trainee b/c the schedule is not new.");
        $('#dpdEditTrainee').append($('<option>', {
            value: '',
            text: '---Select Batch Class here---'
        }));
        $('#InformationLoading').addClass('hide');
    }
    else {
        debugger;
        $('#InformationContainerEdit').removeClass('hide');
        $('#EditMessageContainerError').removeClass('hide');
        $('#editMessageError').html("Please select another batch class.");
        $('#dpdEditTrainee').append($('<option>', {
            value: '',
            text: '---Select Batch Class here---'
        }));
        $('#InformationLoading').addClass('hide');
    }
},
error: function () {
    $('#InformationLoading').addClass('hide');
}
});
}
});
function isValidEquipment() {

var date = $('#txtEditDate').val();
var time = $('#txtEditStartingTime').val();
var lessonId = $('#txtEditLessonId').val();
var equipmentId = $('#dpdEditEquipment').val();
var traineeId = $('#txtEditTraineeId').val();
//alert('date = ' + date + ' time=' + time + ' lessonId=' + lessonId + ' equipmentId=' + equipmentId + ' traineeId= ' + traineeId);
//Check for Equipment WORKING HOURS, DOWN TIME , RECCURING SCHEDULE and FREENESS
var Url = "/Scheduler/CheckConstraints";
//(int equipmentId, int lessonId, string date, string time, int traineeId)
var postData = {
'equipmentId': equipmentId,
'lessonId': lessonId,
'date': date,
'time': time,
'traineeId': traineeId
};
var isValid = true;
$.ajax({
url: Url,
type: 'POST',
data: postData,
success: function (result) {

if (result.isInBetweenEquipmentWorkingHour && !result.isInBetweenEquipmentDowntime && !result.isInBetweenRecurringDowntimeSchedule && result.isEquipmentFree && result.isTraineeFree && !result.isInBetweenEquipmentMaintainanceTime) {
    $("#btnEdit").removeAttr("disabled");
}
else {
    $("#lblEditAvailabilityMessage").html(result.Message);
    $("#btnEdit").attr("disabled", "disabled");
}
},
//async: false,
error: function () {
bootbox.alert("Error has occured while checking constraints!.");
}
});
}

/////////////////////////////////////////////////////////////Newly added Event Handler

$('.FTDAndGFSchedulingContainer').on("change", "#dpdScheduleBatchClass", function () {

$("#lblAddScheduleByDragAndDropTraineeMessage").html("");
$('#traineeBatchClassDiv > .eventDiv').remove();
var batchClassId = $('#dpdScheduleBatchClass').val();
var lessonType = $('#txtLessonType').val();
debugger;
$('#txtBatchIdCurrent1').val(batchClassId);
$('#txtLessonTypeCurrent1').val(lessonType);
$('#txtBatchIdCurrent2').val(batchClassId);
$('#txtLessonTypeCurrent2').val(lessonType);
//Get all trainee of the selected batch class
// GetBatchClassTrainees(int batchClassId)
if (batchClassId != "") {
PopulateTraineesOfTheSelectedBatchClass(batchClassId, lessonType);
}
});
    $('.FTDAndGFSchedulingContainer').on("change", ".dpdAddDragAndDropTrainees", function (e) {

        var lessonId = $('#dpdAddDragAndDropTraineeLesson').val();
        //var traineeId = $('#txtDragAndDropTraineeTraineeIdHide').val();
        var traineeLessonList;
        var isConstraintSatisfied = false;
        var foo = $('#dpdAddDragAndDropTrainees').val();
        $(foo).each(function (i, sel) {
            if (traineeLessonList)
                traineeLessonList = traineeLessonList + '~' + sel;
            else
                traineeLessonList = sel + "-" + $('#dpdAddDragAndDropTraineeLesson').val();
        });

        if (lessonId != "" && lessonId != null) {

            $("#lblAddScheduleByDragAndDropTraineeMessage").html("");
            //Get data to be posted
            //txtDragAndDropTraineeEquipmentIdHide,txtAddDragAndDropTraineeDateHide
            var date = $('#txtAddDragAndDropTraineeDateHide').val();
            var time = $('#txtAddDragAndDropTraineeStartingTime').val();
            var equipmentId = $('#txtDragAndDropTraineeEquipmentIdHide').val();

            // CheckConstraints(int equipmentId, int lessonId, string date, string time)

            //Check for Equipment WORKING HOURS, DOWN TIME , RECCURING SCHEDULE and FREENESS, and check TRAINEE freeness
            var EquipmentWorkingHourUrl = "/Scheduler/CheckConstraints";

            var EquipmentWorkingHourData = {
                'equipmentId': equipmentId,
                'lessonId': lessonId, //Change into trainee id
                'date': date,
                'time': time,
                'traineeId': traineeLessonList
            };

            $.ajax({
                url: EquipmentWorkingHourUrl,
                type: 'POST',
                data: EquipmentWorkingHourData,
                success: function (result) {

                    if (result.isInBetweenEquipmentWorkingHour && !result.isInBetweenEquipmentDowntime && !result.isInBetweenRecurringDowntimeSchedule && result.isEquipmentFree && result.isTraineeFree && !result.isInBetweenEquipmentMaintainanceTime) {

                        isConstraintSatisfied = true;
                    }
                    else {
                        $("#lblAddScheduleByDragAndDropTraineeMessage").html(result.Message);
                        $("#btnAddDragAndDropTraineeEvent").attr("disabled", "disabled");
                        isConstraintSatisfied = false;
                    }
                },
                async: false,
                error: function () {

                }
            });
            return isConstraintSatisfied;
        }
        else {
            return isConstraintSatisfied;
        }
    });
$('.FTDAndGFSchedulingContainer').on("change", ".AddDragAndDropTraineeLessonClass", function (e) {
    debugger;
    $('#RescheduleReasonIdDiv').addClass('hide');
var isLessonScheduled = $(this).find(':selected').data('id');

if (isLessonScheduled != null && isLessonScheduled != "") {
if (isLessonScheduled.toString() === 'true') {
$('#RescheduleReasonIdDiv').removeClass('hide');
}
}
//Check trainee and equipment constraints.
$("#lblAddScheduleByDragAndDropTraineeMessage").html("");
var AddInstructorDropDown = $('#dpdAddDragAndDropInstructor');
AddInstructorDropDown.empty();

$('#dpdAddDragAndDropInstructor').append($('<option>', {
value: '',
text: '--Select Instructor--'
}));

var result = CheckTraineeAndEquipmentConstraintsForDrapAndDropTrainee();

if (result == true) {

//get Trainee Lesson
var traineeId = $('#txtDragAndDropTraineeTraineeIdHide').val();

if (traineeId != "" && traineeId != null) {

$("#lblAddScheduleByDragAndDropTraineeMessage").html("");

//Collect Trainee-Lesson association
//var TraineeLessonList = $('#txtDragAndDropTraineeTraineeIdHide').val() + "-" + $('#dpdAddDragAndDropTraineeLesson').val() + "~";
    var TraineeLessonList;
    var foo = $('#dpdAddDragAndDropTrainees').val();
    $(foo).each(function (i, sel) {
        if (TraineeLessonList)
            TraineeLessonList = TraineeLessonList + '~' + sel + "-" + $('#dpdAddDragAndDropTraineeLesson').val();
        else
            TraineeLessonList = sel + "-" + $('#dpdAddDragAndDropTraineeLesson').val();
    });
//Get data to be posted
var EquipmentId = $('#txtDragAndDropTraineeEquipmentIdHide').val();
var date = $('#txtAddDragAndDropTraineeDateHide').val();
var time = $('#txtAddDragAndDropTraineeStartingTime').val();
// alert('Equipment = ' + EquipmentId + " date= " + date + " time=" + time + " traineeLesson=");
//GetFTDandFlyingInstructors(int equipmentId, string date, string time, string traineeLesson)
var Url = "/Scheduler/GetFTDandFlyingInstructors";

var postData = {
    'equipmentId': EquipmentId,
    'date': date,
    'time': time,
    'traineeLesson': TraineeLessonList
};
//Get instructors
$.ajax({
    url: Url,
    type: 'POST',
    data: postData,
    success: function (result) {

        if (result.hasList) {

            jQuery.each(result.resultData, function (index, InstructorItem) {
                $('#dpdAddDragAndDropInstructor').append($('<option>', {
                    value: InstructorItem.Id + '',
                    text: InstructorItem.Name + ''
                }));
            });
        }
        else {
            $("#lblAddScheduleByDragAndDropTraineeMessage").html("There is no available instructor. Possible causes: " +
                "<ul>" +
                "<li> Instructor may not be assigned to teach the selected equipment model.</li>" +
                "<li> You selecte Pre Solo lesson/s and there may not be available instructor that teach the previous scheduled Pre Solo lesson/s. </li>" +
                "<li> Instructor may not be free in the specified date and time.</li>" +
                "</ul>");

            $("#btnAddDragAndDropTraineeEvent").attr("disabled", "disabled");
        }
    },
    error: function () {

    }
});
}
else {
var AddInstructorDropDown = $('#dpdAddDragAndDropInstructor');
AddInstructorDropDown.empty();

//And Initialize the first/defualt option for all of those elements
$('#dpdAddDragAndDropInstructor').append($('<option>', {
    value: '',
    text: '--Select Instructor--'
}));
}

}
});

$('.FTDAndGFSchedulingContainer').on("change", "#dpdAddDragAndDropInstructor", function () {

//dpdDragAndDropTraineeDebriefingTime,dpdDragAndDropTraineeBriefingTime
$('#DragAndDropBriefingAndDebriefingMessageContainer').addClass('hide');
$('#LeavesAndLicenseExpiryMessage').addClass('hide');
var instructorId = $('#dpdAddDragAndDropInstructor').val();

if (instructorId != "") {

$("#lblAddScheduleByDragAndDropTraineeMessage").html("");
$('#ResponceMessage').html("");

//Get data to be posted
var date = $('#txtAddDragAndDropTraineeDateHide').val();
var time = $('#txtAddDragAndDropTraineeStartingTime').val();
var equipmentId = $('#txtDragAndDropTraineeEquipmentIdHide').val();

//Collect Trainee-Lesson association

//var TraineeLessonList = $('#txtDragAndDropTraineeTraineeIdHide').val() + "-" + $('#dpdAddDragAndDropTraineeLesson').val() + "~";
    var TraineeLessonList;
    var foo = $('#dpdAddDragAndDropTrainees').val();
    $(foo).each(function (i, sel) {
        if (TraineeLessonList)
            TraineeLessonList = TraineeLessonList + '~' + sel + "-" + $('#dpdAddDragAndDropTraineeLesson').val();
        else
            TraineeLessonList = sel + "-" + $('#dpdAddDragAndDropTraineeLesson').val();
    });
//GetBriefingAndDebriefing(string date, string time, int instructorId, int equipmentId, string traineeLesson)
var Url = "/Scheduler/GetBriefingAndDebriefing";

var postData = {
'date': date,
'time': time,
'instructorId': instructorId,
'equipmentId': equipmentId,
'traineeLesson': TraineeLessonList
};


//Get Briefing And Debriefing
$.ajax({
url: Url,
type: 'POST',
data: postData,
success: function (result) {

    $('#dpdDragAndDropTraineeBriefingTime').empty();
    $('#dpdDragAndDropTraineeDebriefingTime').empty();
    $('#DragAndDropTraineeBriefingMessage').html('');
    $('#DragAndDropTraineeDebriefingMessage').html('');

    if (result.resultData.Briefing.length > 0) {

        //And Initialize the first/defualt option for all of those elements
        $('#dpdDragAndDropTraineeBriefingTime').append($('<option>', {
            value: '',
            text: '--Defualt Briefing Time--'
        }));
    }
    else {
        //DragAndDropBriefingAndDebriefingMessageContainer,DragAndDropTraineeBriefingMessage,DragAndDropTraineeDebriefingMessage
        $('#DragAndDropBriefingAndDebriefingMessageContainer').removeClass('hide');
        $('#DragAndDropTraineeBriefingMessage').html('There is no briefing time to share. Briefing time will be taken an hour before the selected lesson/s started.');

        $('#dpdDragAndDropTraineeBriefingTime').append($('<option>', {
            value: '',
            text: 'Defualt Briefing Time'
        }));
    }
    if (result.resultData.Debriefing.length > 0) {
        //And Initialize the first/defualt option for all of those elements
        $('#dpdDragAndDropTraineeDebriefingTime').append($('<option>', {
            value: '',
            text: '--Defualt Debriefing Time--'
        }));
    }
    else {
        $('#DragAndDropBriefingAndDebriefingMessageContainer').removeClass('hide');
        $('#DragAndDropTraineeDebriefingMessage').html('There is no debriefing time to share. Debriefing time will be taken an hour after the selected lesson/s finished.');
        $('#dpdDragAndDropTraineeDebriefingTime').append($('<option>', {
            value: '',
            text: 'Defualt Debriefing Time'
        }));
    }
    if (result.hasList) {

        jQuery.each(result.resultData.Briefing, function (index, BriefingItem) {
            $('#dpdDragAndDropTraineeBriefingTime').append($('<option>', {
                value: BriefingItem.Id + '',
                text: BriefingItem.Name + ''
            }));
        });

        jQuery.each(result.resultData.Debriefing, function (index, DebriefingItem) {
            $('#dpdDragAndDropTraineeDebriefingTime').append($('<option>', {
                value: DebriefingItem.Id + '',
                text: DebriefingItem.Name + ''
            }));
        });
    }
    else {
        //$("#lblAddScheduleByDragAndDropTraineeMessage").html("There is no available instructor. Possible causes: " +
        //    "<ul>" +
        //    "<li> Instructor may not be assigned to teach the selected equipment model.</li>" +
        //    "<li> There may not be available instructor that teach the previous pre solo lesson/s. </li>" +
        //    "<li> Instructor may not be free in the specified date and time.</li>" +
        //    "</ul>");

        //$("#btnAddDragAndDropTraineeEvent").attr("disabled", "disabled");
    }
},
error: function () {

}
});
$.ajax({
url: "/Scheduler/GetLeaveAndLicenceExpiry",
type: 'POST',
data: postData,
success: function (result) {
    if (result.resultData.length > 0) {
        $('#LeavesAndLicenseExpiryMessage').removeClass('hide');
        //And Initialize the first/defualt option for all of those elements
        $('#ResponceMessage').html(result.resultData);
    }

},
error: function () {

}
});

}
else {
$('#dpdDragAndDropTraineeBriefingTime').empty();

//And Initialize the first/defualt option for all of those elements
$('#dpdDragAndDropTraineeBriefingTime').append($('<option>', {
value: '',
text: 'Has Briefing Time?'
}));

$('#dpdDragAndDropTraineeDebriefingTime').empty();

//And Initialize the first/defualt option for all of those elements
$('#dpdDragAndDropTraineeDebriefingTime').append($('<option>', {
value: '',
text: 'Has Debriefing Time?'
}));
}
});

$('body').on('click', "#chbAddDragAndDropTraineeBriefing", function () {
////dpdDragAndDropTraineeDebriefingTime,dpdDragAndDropTraineeBriefingTime
if ($(this).prop("checked") == true) {
$('#dpdDragAndDropTraineeBriefingTime').attr('disabled', true);
$('#DragAndDropTraineeCustomBriefingTime').removeClass('hide');
$('#txtDragAndDropTraineeCustomBriefing').val("true");
}
else {
$('#dpdDragAndDropTraineeBriefingTime').removeAttr("disabled");
$('#DragAndDropTraineeCustomBriefingTime').addClass('hide');
$('#txtDragAndDropTraineeCustomBriefing').val("false");
}
});

$('body').on('click', "#chbAddDebriefing", function () {
if ($(this).prop("checked") == true) {
$('#dpdDragAndDropTraineeDebriefingTime').attr('disabled', true);
$('#DragAndDropTraineeCustomDebriefingTime').removeClass('hide');
$('#txtDragAndDropTraineeCustomDebriefing').val("true");
}
else {
$('#dpdDragAndDropTraineeDebriefingTime').removeAttr("disabled");
$('#DragAndDropTraineeCustomDebriefingTime').addClass('hide');
$('#txtDragAndDropTraineeCustomDebriefing').val("false");
}
});

function CheckTraineeAndEquipmentConstraintsForDrapAndDropTrainee() {


var lessonId = $('#dpdAddDragAndDropTraineeLesson').val();
 //   var traineeId = $('#AddDragAndDropTrainees').val();
    var traineeLessonList;
var isConstraintSatisfied = false;
    var foo = $('#dpdAddDragAndDropTrainees').val();
    $(foo).each(function (i, sel) {
        if (traineeLessonList)
            traineeLessonList = traineeLessonList + '~' + sel;
        else
            traineeLessonList = sel + "-" + $('#dpdAddDragAndDropTraineeLesson').val();
    });

if (lessonId != "" && lessonId != null) {

$("#lblAddScheduleByDragAndDropTraineeMessage").html("");
//Get data to be posted
//txtDragAndDropTraineeEquipmentIdHide,txtAddDragAndDropTraineeDateHide
var date = $('#txtAddDragAndDropTraineeDateHide').val();
var time = $('#txtAddDragAndDropTraineeStartingTime').val();
var equipmentId = $('#txtDragAndDropTraineeEquipmentIdHide').val();

// CheckConstraints(int equipmentId, int lessonId, string date, string time)

//Check for Equipment WORKING HOURS, DOWN TIME , RECCURING SCHEDULE and FREENESS, and check TRAINEE freeness
var EquipmentWorkingHourUrl = "/Scheduler/CheckConstraints";

var EquipmentWorkingHourData = {
'equipmentId': equipmentId,
'lessonId': lessonId, //Change into trainee id
'date': date,
    'time': time,
    'traineeId': traineeLessonList
};

$.ajax({
url: EquipmentWorkingHourUrl,
type: 'POST',
data: EquipmentWorkingHourData,
success: function (result) {

    if (result.isInBetweenEquipmentWorkingHour && !result.isInBetweenEquipmentDowntime && !result.isInBetweenRecurringDowntimeSchedule && result.isEquipmentFree && result.isTraineeFree && !result.isInBetweenEquipmentMaintainanceTime) {

        isConstraintSatisfied = true;
    }
    else {
        $("#lblAddScheduleByDragAndDropTraineeMessage").html(result.Message);
        $("#btnAddDragAndDropTraineeEvent").attr("disabled", "disabled");
        isConstraintSatisfied = false;
    }
},
async: false,
error: function () {

}
});
return isConstraintSatisfied;
}
else {
return isConstraintSatisfied;
}
}

function PopulateTraineesOfTheSelectedBatchClass(batchClassId, lessonType) {

var Url = "/Scheduler/GetBatchClassTrainees";
//alert('lessonType = ' + lessonType);
var postData = {
'batchClassId': batchClassId,
'lessonType': lessonType,
};

//Begin, Get equipment reservation time
$.ajax({
url: Url,
type: 'POST',
data: postData,
success: function (result) {

if (result.hasList) {

    $("#traineeBatchClassDiv").empty();
    /*
    $('#CourseModuleForm > .div2:last').remove();
        var newFormElement = $("#CourseModuleForm");
        newFormElement = $(selectOption).attr({ id: "CourseModuleForm" });
        newFormElement.appendTo("#CourseModuleForm");
        */
  

    var traineeList = "";
    var trainees="";
    jQuery.each(result.resultData, function (index, trainee) {
        var dataId = trainee.Id + "~" + trainee.NearFutureLesson;
        traineeList = traineeList + "<div class='fc-event eventDiv' data-id='" + dataId + "'>" + trainee.NameAndLesson + "</div>";
        trainees = trainees + "-" + trainee.Id + "~" + trainee.Name;
        
    });
    $('#txtDragAndDropTraineeTraineeIdHide').val(trainees);
    debugger;
   
    $('#traineeBatchClassDiv > .eventDiv').remove();
    var newFormElement = $("#traineeBatchClassDiv");
    newFormElement = $(traineeList).attr({ id: "traineeBatchClassDiv" });
    newFormElement.appendTo("#traineeBatchClassDiv");

    $('#external-events .fc-event').each(function () {

        /* // store data so the calendar knows to render an event upon drop
            $(this).data('event', {
                title: $.trim($(this).text()), // use the element's text as the event title
                stick: true // maintain when user navigates (see docs on the renderEvent method)
            });*/

        // make the event draggable using jQuery UI
        $(this).draggable({
            zIndex: 999,
            revert: true,      // will cause the event to go back to its
            revertDuration: 0  //  original position after the drag
        });
    });
}
else {
    $("#lblAddScheduleByDragAndDropTraineeMessage").html("There is no available trainee. Possible cause: " +
            "<ul>" + "<li> No trainee/s assigned to the selected batch class .</li>" + "</ul>");
}
},
error: function () {
bootbox.alert("Error has occured!!!.");
}
});
}



$('#txtAddDragAndDropTraineeStartingTime').change(function () {
$("#lblAddScheduleByDragAndDropTraineeMessage").html("");
$('#dpdAddDragAndDropTraineeLesson').val(null).trigger("change");
});

</script>
}




<br />
<div class="FTDAndGFSchedulingContainer">

<div id='wrap'>
<div id='external-events' class="row">
@*<div class="col-lg-12" id="content-wrapper">*@
<div>
    <div id="content-wrapper">
        @*<div class="btn-group col-lg-2">*@
        <div class="equ-typ-sel">
            <button type="button" class="btn btn-info active buttoGroup" data-id="FTD">FTD</button>
            <button type="button" class="btn btn-info buttoGroup" data-id="FLYING">FLYING</button>
        </div>
        @*</div>*@

        @*<div class="form-group  col-lg-4">*@
        <div class="bat-sel">
            <select class="form-control input-sm" type="text" name="dpdScheduleBatchClass" id="dpdScheduleBatchClass">
                <option value="">-- Batch Class --</option>
                @{
                    if (ViewBag.BatchClassList != null)
                    {
                        List
                        <BatchView>
                            BatchClassList = (List<BatchView>
                                )ViewBag.BatchClassList;
                        foreach (var batchClass in BatchClassList)
                        {
                            <option value="@batchClass.Id">@batchClass.Name</option>
                        }
                    }
                }
            </select>
        </div>
        @*</div>*@
        <div class="les-typ">
            <select class="form-control input-sm" type="text" name="dpdLessonCategory" id="dpdLessonCategory"></select>
        </div>
    </div>
@*<div class="col-lg-10">*@
    <div class="equ-sel">
        <select class="form-control input-sm select2 Eqipmentlist" type="text" name="Eqipmentlist" data-id="1" id="Eqipmentlist" width="300" multiple="multiple" style="width: 100%;" data-val="true"></select>
    </div>
    
@*</div>*@


        <div class="resultScroll col-lg-12">
            <div id="traineeBatchClassDiv">
            </div>
        </div>


    </div>

<div id='calendar'></div>

<div style='clear:both'></div>

</div>

<div class="row hide">
<input type="text" id="txtLessonType" name="txtLessonType" />
</div>

<br />

<!--Begin, Add Even modal popup-->
<div class="modal modal-fade" id="addScheduledEventModel" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
<div class="modal-dialog modal-lg" role="document">
<div class="modal-content">
<div class="modal-header">
<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
<h5 class="modal-title"> You are trying to schedule <strong><label id="lblMyModalTitleEquipmentName"></label></strong> at <strong><label id="lblMyModalTitleTime"></label></strong></h5>
</div>
<div class="modal-body">
Press ESC button to exit.
<div style="color:red"><lable class="control-label" name="lblAddAvailabilityMessage" id="lblAddAvailabilityMessage"></lable></div>
<div class="form-horizontal add-event">

    @*@using (Html.BeginForm("AddNewTraineeLessonSchedule", "Scheduler", FormMethod.Post, new { enctype = "multipart/form-data", id = "btnAddEvent" }))
    {*@
        <div style="color:red">
            @Html.AntiForgeryToken()
        </div>

        <div class="row">
            <div class="col-md-7">

                <div class="form-group">
                    <lable class="control-label col-md-3">Start Time </lable>
                    <div class="col-md-9">
                        <div class="input-group  bootstrap-timepicker timepicker">
                            <input type="text" class="form-control" id="txtAddStartingTime" name="txtAddStartingTime">
                            <div class="input-group-addon Search-Equipment">
                                <i class="fa fa-clock-o"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="TraineeLessonContainer">
                    <div class="form-group row">
                        <div class="col-md-1">
                            <button type="button" class="btn btn-sm btn-info btn-flat" id="btnAdd" name="btnAdd">
                                <i class="fa fa-plus"></i>
                            </button>
                        </div>


                        <div class="col-md-6">
                            <lable class="control-label">Trainee</lable>
                            <select class="form-control input-sm select2 AddTraineeClass" type="text" name="dpdAddTrainee1" data-id="1" id="dpdAddTrainee1" width="300" multiple="multiple" style="width: 100%;"></select>
                        </div>

                        <div class="col-md-4">
                            <lable class="control-label">Lesson</lable>
                            <select class="form-control input-sm select2 AddLessonClass" type="text" name="dpdAddLesson1" data-id="1" id="dpdAddLesson1" width="300" multiple="multiple" style="width: 100%;"></select>
                        </div>
                        <div class="col-md-1">
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <lable class="control-label col-md-3">Instructor</lable>
                    <div class="col-md-9">
                        <select class="form-control input-sm" type="text" name="dpdAddInstructor" id="dpdAddInstructor" width="300">
                            <option value="">--Select Instructor--</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <lable class="control-label col-md-3"> Briefing Time </lable>
                    <div class="col-md-9">
                        <div class="input-group">
                            <select class="form-control input-sm" type="text" name="dpdBriefingTime" id="dpdBriefingTime" width="300">
                                <option value="">--Select Briefing Time --</option>
                            </select>
                            <div class="input-group-btn">
                                <button type="button" class="btn btn-sm btn-info btn-flat">
                                    <input type="checkbox" class="checkbox" id="chbAddBriefing" name="chbAddBriefing" />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group hide" id="CustomBriefingTime">
                    <lable class="control-label col-md-3"> From </lable>
                    <div class="col-md-9">
                        <div class="input-group date customDateTimePicker">
                            <input type="text" class="form-control" id="txtAddBriefingStartingTime" name="txtAddBriefingStartingTime" readonly>
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                        </div>
                        @*<div class="input-group  bootstrap-timepicker timepicker">
                                <input type="text" class="form-control" id="txtAddBriefingStartingTime" name="txtAddBriefingStartingTime">
                                <div class="input-group-addon">
                                    <i class="fa fa-clock-o"></i>
                                </div>
                            </div>*@
                    </div>
                </div>

                <div class="form-group">
                    <lable class="control-label col-md-3"> Debriefing Time </lable>
                    <div class="col-md-9">
                        <div class="input-group">
                            <select class="form-control input-sm" type="text" name="dpdDebriefingTime" id="dpdDebriefingTime" width="300">
                                <option value="">--Select Debriefing Time--</option>
                            </select>
                            <div class="input-group-btn">
                                <button type="button" class="btn btn-sm btn-info btn-flat">
                                    <input type="checkbox" class="checkbox" id="chbAddDebriefing" name="chbAddDebriefing" />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group hide" id="CustomDebriefingTime">
                    <lable class="control-label col-md-3"> From </lable>
                    <div class="col-md-9">
                        <div class="input-group date customDateTimePicker">
                            <input type="text" class="form-control" id="txtAddDebriefingStartingTime" name="txtAddDebriefingStartingTime" readonly>
                            <div class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </div>
                        </div>
                        @*<div class="input-group  bootstrap-timepicker timepicker">
                                <input type="text" class="form-control" id="txtAddDebriefingStartingTime" name="txtAddDebriefingStartingTime" readonly>
                                <div class="input-group-addon">
                                    <i class="fa fa-clock-o"></i>
                                </div>
                            </div>*@
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-6 pull-right">
                        <button class="btn btn-info btn-sm" type="submit" id="btnAddEvent"><span class="glyphicon glyphicon-add"></span>&nbsp;&nbsp;Save</button>
                    </div>
                </div>

            </div>

            <div class="col-md-5 hide" id="InstructionContainer">
                <div class="row">
                    <div class="col-md-12">
                        <div class="callout callout-info">
                            <h4>Instructions!</h4>
                            <ul type="text" name="UnorderReservedDateTimes" id="UnorderReservedDateTimes" width="300"></ul>
                        </div>
                    </div>
                </div>
                <div class="row hide" id="BriefingAndDebriefingMessageContainer">
                    <div class="col-md-12">
                        <div class="alert alert-warning alert-dismissible">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                            <h4><i class="icon fa fa-warning"></i> Alert!</h4>
                            <ul>
                                <li><lable id="BriefingMessage"> </lable></li>
                                <li><lable id="DebriefingMessage"> </lable></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="row hide" id="AddingErrorMessageContainer">
                    <div class="col-md-12">
                        <div class="alert alert-warning alert-dismissible">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                            <h4><i class="icon fa fa-warning"></i>Faild!</h4>
                            <ul>
                                <li><lable id="AddFaildMessage"> </lable></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="row hide" id="AddingSuccessContainer">
                    <div class="col-md-12">
                        <div class="alert alert-success alert-dismissible">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                            <h4><i class="icon fa fa-hand-o-right"></i> Success!</h4>
                            <ul>
                                <li><lable id="AddSuccessMessage"> </lable></li>
                            </ul>
                        </div>
                    </div>
                </div>
                                   
            </div>
        </div>
        <div class="form-group hide">
            <div class="col-md-6">
                <input class="form-control" type="text" id="txtPhaseScheduleId" name="txtPhaseScheduleId" />
                <input class="form-control" type="text" id="txtEquipmentIdHide" name="txtEquipmentIdHide" />
                <input type="text" class="form-control input-sm" name="txtAddDateHide" id="txtAddDateHide" readonly />
                <input type="text" class="form-control input-sm" name="txtBriefingTime" id="txtBriefingTime" readonly />
                <input type="text" class="form-control input-sm" name="txtDebriefingTime" id="txtDebriefingTime" readonly />
                <input type="text" id="txtNumberOfTraineeRowLessonAdded" name="txtNumberOfTraineeRowLessonAdded" class="form-control" />
                <input type="text" id="txtNumberOfTraineeLessonRowRemoved" name="txtNumberOfTraineeLessonRowRemoved" class="form-control" />
                <input type="text" id="txtTraineeLesson" name="txtTraineeLesson" class="form-control" />
                <input type="text" id="txtCustomDebriefing" name="txtCustomDebriefing" class="form-control" />
                <input type="text" id="txtCustomBriefing" name="txtCustomBriefing" class="form-control" />
            </div>
        </div>
    @*}*@


</div>
</div>
</div>
</div>
</div>
<!-- End, Add Even modal popup-->
    <!--Begin, Add Equipment mentainance Even modal popup-->
<div class="modal modal-fade" id="AddEquipmentMentEventModel" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" id="editModalPopup" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title" id="myEquMentModalLabel">Schedule Detail.</h4>
                </div>
                <div class="modal-body" id="editModalBody">
                    Press ESC button to exit.
                    <div style="color:red"><lable class="control-label" name="lblEditAvailabilityMessage" id="lblEditAvailabilityMessage"></lable></div>
                    <div class="add-event">
                        <br />
                        <div class="nav-tabs-custom">
                            <ul class="nav nav-tabs" id="EditContainerTab">
                                <li class=""><a href="#CreateEquMent_tab" data-toggle="tab" aria-expanded="false">Create New</a></li>
                               
                                @*<li class=""><a href="#checkIn_tab" data-toggle="tab" aria-expanded="false">Check In</a></li>
                                    <li class=""><a href="#rampOut_tab" data-toggle="tab" aria-expanded="false">Ramp Out</a></li>
                                    <li class=""><a href="#rampIn_tab" data-toggle="tab" aria-expanded="false">Ramp In</a></li>*@

                            </ul>
                            <div class="tab-content">
                             
                                <div class="tab-pane" id="CreateEquMent_tab">
                                    <div id="CreateEquMent-container">

                                    </div>
                                </div>
                               
                            </div>
                        </div>
                    </div>
                    <div class="hide">
                        <input type="text" name="EquipmentId" id="EquipmentId" />
                    </div>
               </div>
            </div>
        </div>
    </div>
    <!--End, Add Equipment mentainance Even modal popup-->
<!--Begin, Edit Even modal popup-->
<div class="modal modal-fade" id="EditScheduledEventModel" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
<div class="modal-dialog modal-lg" role="document">
<div class="modal-content">
<div class="modal-header">
<button type="button" class="close" id="editModalPopup" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
<h4 class="modal-title" id="myEditModalLabel">Schedule Detail.</h4>
</div>
<div class="modal-body" id="editModalBody">
Press ESC button to exit.
<div style="color:red"><lable class="control-label" name="lblEditAvailabilityMessage" id="lblEditAvailabilityMessage"></lable></div>
<div class="add-event">
    <br />
    <div class="nav-tabs-custom">
        <ul class="nav nav-tabs" id="EditContainerTab">
            <li class="active"><a href="#detail_tab" data-toggle="tab" aria-expanded="true">Detail</a></li>
                                
                <li class=""><a href="#update_tab" data-toggle="tab" aria-expanded="false">Update</a></li>
                <li class=""><a href="#chtrainee_tab" data-toggle="tab" aria-expanded="false">Change Trainee</a></li>
                <li class=""><a href="#chlesson_tab" data-toggle="tab" aria-expanded="false">Change Lesson</a></li>
                                
            @*<li class=""><a href="#checkIn_tab" data-toggle="tab" aria-expanded="false">Check In</a></li>
    <li class=""><a href="#rampOut_tab" data-toggle="tab" aria-expanded="false">Ramp Out</a></li>
    <li class=""><a href="#rampIn_tab" data-toggle="tab" aria-expanded="false">Ramp In</a></li>*@

        </ul>
        <div class="tab-content">
            <div class="tab-pane active" id="detail_tab">
                <div class="form-horizontal">
                    <div class="row">
                        <div class="col-xs-12 col-sm-12 col-md-7 col-lg-7 custom-Col">
                            <br /><br />
                            <div class="form-group hide">
                                <lable class="control-label  col-md-4"><strong>Event Id</strong> </lable>
                                <div class="col-md-6">
                                    <lable class="control-label" name="txtEventID" id="txtEventID"></lable>
                                </div>
                            </div>
                            <div class="form-group">
                                <div class="col-md-12">
                                    <lable class="control-label" name="txtDescription" id="txtDescription"></lable>
                                </div>
                            </div>
                        </div>

                        <div class="col-xs-12 col-sm-12 col-md-5 col-lg-5">
                            @using (Html.BeginForm("CancelSchedule", "Scheduler", FormMethod.Post, new { enctype = "multipart/form-data" }))
                            {
                                <div class="alert alert-warning alert-dismissible">
                                    <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                    <h4><i class="icon fa fa-warning"></i>Note!</h4>
                                    Do you need to cancel schedule?
                                </div>
                                <div class="row hide">
                                    <input type="text" id="txtLessonTypeCurrent1" name="txtLessonTypeCurrent" value='@ViewBag.LessonType' />
                                    <input type="text" id="txtBatchIdCurrent1" name="txtBatchIdCurrent" value='@ViewBag.BatchClassId' />
                                    <input type="text" class="form-control input-sm PTSMSDatepicker" name="txtEditDate" id="txtEditDate" />
                                </div>
                                @Html.AntiForgeryToken()
                                <div style="color:red"> @Html.ValidationSummary()</div>

                                <div class="form-group">
                                    <lable class="control-label col-md-4">Reason</lable>
                                    <div class="col-md-8">
                                        <select class="form-control input-sm" type="text" name="cancelReason" id="cancelReason" width="300" style="width: 100%;" data-val="true" data-val-required="Reason is required.">
                                            <option value="">--Select Reason--</option>
                                            <option value="Weather Condition">Weather Condition </option>
                                            <option value="Schedule clash">Schedule Clash</option>
                                            <option value="Maintenance">Maintenance </option>
                                            <option value="Others">Others</option>
                                        </select>
                                    </div>
                                </div>
                                <div class="form-group">
                                    <lable class="control-label col-md-4">Remark</lable>
                                    <div class="col-md-8">
                                        <textarea class="form-control" name="cancelRemark" id="cancelRemark" rows="7" placeholder="Write remark" data-val="true" data-val-required="Remark is required."></textarea>
                                    </div>
                                </div>
                                <div class="form-group hide">
                                    <div class="col-md-8">
                                        <input type="text" class="form-control" name="cancelFlyingAndScheduling" id="cancelFlyingAndScheduling" rows="7" placeholder="Write remark" data-val="true" data-val-required="schedule id is required." />
                                    </div>
                                </div>
                                <div class="form-group">
                                    <div class="col-md-6 pull-right">
                                        <button class="btn btn-warning btn-sm" type="submit" id="btnCancel"><span class="glyphicon glyphicon-remove"></span>&nbsp;&nbsp;Cancel</button>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-pane" id="update_tab">
                <div class="form-horizontal Edit-event">

                    @*@using (Html.BeginForm("UpdateTraineeLessonSchedule", "Scheduler", FormMethod.Post, new { enctype = "multipart/form-data", id = "btnEditEvent" }))
                    {*@
                        <div style="color:red">
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        </div>
                        <div class="row hide">
                            <input type="text" id="txtLessonTypeCurrent1" name="txtLessonTypeCurrent" value='@ViewBag.LessonType'/>
                            <input type="text" id="txtBatchIdCurrent1" name="txtBatchIdCurrent" value='@ViewBag.BatchClassId'/>
                        </div>
                        <div class="row">
                            <div class="col-md-6">

                                <div class="form-group">
                                    <lable class="control-label col-md-4">Is Reschedule?</lable>
                                    <div class="col-md-8">
                                        <input type="checkbox" class="checkbox" name="ckbIsReschedule" id="ckbIsReschedule" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <lable class="control-label col-md-4">Date </lable>
                                    <div class="col-md-8">
                                        <div class="input-group date">
                                            <input type="text" class="form-control input-sm PTSMSDatepicker" name="txtDateForUpdate" id="txtDateForUpdate" />
                                            <div class="input-group-addon">
                                                <i class="fa fa-calendar"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <lable class="control-label col-md-4">Start Time </lable>
                                    <div class="col-md-8">
                                        <div class="input-group  bootstrap-timepicker timepicker">
                                            <input type="text" class="form-control" id="txtTimeForUpdate" name="txtTimeForUpdate">
                                            <div class="input-group-addon ">
                                                <i class="fa fa-clock-o"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>

                         

                                <div class="form-group">
                                    <lable class="control-label col-md-4">Instructor</lable>
                                    <div class="col-md-8">
                                        <select class="form-control input-sm" type="text" name="dpdEditInstructor" id="dpdEditInstructor" style="width: 100%;"></select>
                                    </div>
                                </div>
                                               

                               

                                <div class="form-group">
                                    <div class="col-md-6 pull-right">
                                        <button class="btn btn-info btn-sm" type="submit" id="btnEditEvent"><span class="glyphicon glyphicon-add"></span>&nbsp;&nbsp;Update</button>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6 hide" id="InformationContainer">
                                <div class="col-md-12">
                                    <div class="callout callout-info">
                                        <h4>Instructions!</h4>
                                        <ul type="text" name="UnorderEditReservedDateTimes" id="UnorderEditReservedDateTimes" width="300"></ul>
                                    </div>
                                </div>

                                <div class="row hide" id="EditBriefingAndDebriefingMessageContainer">
                                    <div class="col-md-12">
                                        <div class="alert alert-warning alert-dismissible">
                                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                            <h4><i class="icon fa fa-warning"></i> Alert!</h4>
                                            <ul>
                                                <li><lable id="editBriefingMessage"> </lable></li>
                                                <li><lable id="editDebriefingMessage"> </lable></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <div class="row hide" id="EditBriefingAndDebriefingSuccessContainer">
                                    <div class="col-md-12">
                                        <div class="alert alert-success alert-dismissible">
                                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                            <h4><i class="icon fa fa-hand-o-right"></i> Success!</h4>
                                            <ul>
                                                <li><lable id="editDebriefingSuccessMessage"> </lable></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <div class="row hide" id="EditBriefingAndDebriefingFailContainer">
                                    <div class="col-md-12">
                                        <div class="alert alert-danger alert-dismissible">
                                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                            <h4><i class="icon fa fa-hand-o-right"></i> Failed!</h4>
                                            <ul>
                                                <li><lable id="editDebriefingFailMessage"> </lable></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>


                            <div class="form-group hide">
                                <div class="col-md-6">
                                    <input class="form-control" type="text" id="txtfylingAndFTDScheduleId" name="txtfylingAndFTDScheduleId" />
                                    <input class="form-control" type="text" id="txtEditLessonId" name="txtEditLessonId" />
                                    <input class="form-control" type="text" id="txtEditTraineeId" name="txtEditTraineeId" />
                                    <input type="text" class="form-control" name="txtIsReschedule" id="txtIsReschedule" />
                                    <input type="text" class="form-control" name="txtSequence" id="txtSequence" />
                                    <input type="text" class="form-control" name="txtIsEditSubmitButtonClicked" id="txtIsEditSubmitButtonClicked" />
                                    <input type="text" class="form-control" name="txtIsAddSubmitButtonClicked" id="txtIsAddSubmitButtonClicked" />
                                    <input type="text" id="txtEditCustomDebriefing" name="txtEditCustomDebriefing" class="form-control" />
                                    <input type="text" id="txtEditCustomBriefing" name="txtEditCustomBriefing" class="form-control" />
                                    <input type="text" id="txtEditBatchClassId" name="txtEditBatchClassId" class="form-control" />
                                </div>
                            </div>

                        </div>
                    @*}*@

                    <div class="form-group hide">
                        <div class="col-md-6">
                            <input class="form-control" type="text" id="txtPhaseScheduleId" name="txtPhaseScheduleId" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane" id="chtrainee_tab">
                <div class="form-horizontal Edit-event">

                    @*@using (Html.BeginForm("UpdateTraineeForm", "Scheduler", FormMethod.Post, new { enctype = "multipart/form-data", id = "btnEditTrainee" }))
                    {*@
                        <div style="color:red">
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        </div>
                        <div class="row hide">
                            <input type="text" id="txtLessonTypeCurrent1" name="txtLessonTypeCurrent" value='@ViewBag.LessonType' />
                            <input type="text" id="txtBatchIdCurrent1" name="txtBatchIdCurrent" value='@ViewBag.BatchClassId' />
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                                    

                                <div class="form-group">
                                    <lable class="control-label col-md-4">Batch Class</lable>
                                    <div class="col-md-8">
                                        <select class="form-control input-sm" type="text" name="dpdEditBatchClass" id="dpdEditBatchClass" width="300" style="width: 100%;">
                                            <option value="">--Select Class--</option>
                                            @{
                                                if (ViewBag.BatchClassList != null)
                                                {
                                                    List
                                                    <BatchView>
                                                        BatchClassList = (List<BatchView>
                                                            )ViewBag.BatchClassList;
                                                    foreach (var batchClass in BatchClassList)
                                                    {
                                                        <option value="@batchClass.Id">@batchClass.Name</option>
                                                    }
                                                }
                                                }
                                        </select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <lable class="control-label col-md-4">Trainee</lable>
                                    <div class="col-md-8">
                                        <select class="form-control input-sm" type="text" name="dpdEditTrainee" id="dpdEditTrainee" style="width: 100%;"></select>
                                    </div>
                                </div>

                                <div class="form-group">
                                    <div class="col-md-6 pull-right">
                                        <button class="btn btn-info btn-sm" type="submit" id="btnEditTrainee"><span class="glyphicon glyphicon-add"></span>&nbsp;&nbsp;Update</button>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6 hide" id="InformationLoading">
                                <img style="width:100%" src="~/Content/Images/giphy.gif"/>
                                </div>

                                <div class="col-md-6 hide" id="InformationContainerEdit">
                                    <div class="row hide" id="EditMessageContainerError">
                                        <div class="col-md-12">
                                            <div class="alert alert-warning alert-dismissible">
                                                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                                <h4><i class="icon fa fa-warning"></i> Alert!</h4>
                                                <ul>
                                                    <li><lable id="editMessageError"> </lable></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="row hide" id="EditMessageContainerSuccess">
                                        <div class="col-md-12">
                                            <div class="alert alert-success alert-dismissible">
                                                <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                                <h4><i class="icon fa fa-angle-right"></i> Success!</h4>
                                                <ul>
                                                    <li><lable id="editMessageSuccess"> </lable></li>
                                                </ul>
                                            </div>
                                        </div>
                                    </div>
                                </div>


                                <div class="form-group hide">
                                    <div class="col-md-6">
                                        <input class="form-control" type="text" id="txtfylingAndFTDScheduleIdEdit" name="txtfylingAndFTDScheduleIdEdit" />
                                        <input class="form-control" type="text" id="txtEditLessonId" name="txtEditLessonId" />
                                        <input class="form-control" type="text" id="txtEditTraineeId" name="txtEditTraineeId" />
                                        <input type="text" class="form-control" name="txtIsReschedule" id="txtIsReschedule" />
                                        <input type="text" class="form-control" name="txtSequence" id="txtSequence" />
                                        <input type="text" class="form-control" name="txtIsEditSubmitButtonClicked" id="txtIsEditSubmitButtonClicked" />
                                        <input type="text" class="form-control" name="txtIsAddSubmitButtonClicked" id="txtIsAddSubmitButtonClicked" />
                                        <input type="text" id="txtEditCustomDebriefing" name="txtEditCustomDebriefing" class="form-control" />
                                        <input type="text" id="txtEditCustomBriefing" name="txtEditCustomBriefing" class="form-control" />
                                        <input type="text" id="txtEditBatchClassId" name="txtEditBatchClassId" class="form-control" />
                                    </div>
                                </div>

                            </div>
                    @*}*@

                    <div class="form-group hide">
                        <div class="col-md-6">
                            <input class="form-control" type="text" id="txtPhaseScheduleId" name="txtPhaseScheduleId" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane" id="chlesson_tab">
                <div class="form-horizontal Edit-event">

                    @*@using (Html.BeginForm("ChangeLessonSchedule", "Scheduler", FormMethod.Post, new { enctype = "multipart/form-data", id = "btnEditLesson" }))
                    {*@
                        <div style="color:red">
                            @Html.AntiForgeryToken()
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                        </div>
                        <div class="row hide">
                            <input type="text" id="txtLessonTypeCurrent1" name="txtLessonTypeCurrent" value='@ViewBag.LessonType' />
                            <input type="text" id="txtBatchIdCurrent1" name="txtBatchIdCurrent" value='@ViewBag.BatchClassId' />
                        </div>
                        <div class="row">
                            <div class="col-md-6">

                                <div class="form-group">
                                    <lable class="control-label col-md-4">Is Reschedule?</lable>
                                    <div class="col-md-8">
                                        <input type="checkbox" class="checkbox" name="ckbIsReschedule" id="ckbIsReschedule" />
                                    </div>
                                </div>

                                <div class="form-group">
                                    <lable class="control-label col-md-4">Lesson</lable>
                                    <div class="col-md-8">
                                        <select class="form-control input-sm" type="text" name="dpdEditLesson" id="dpdEditLesson" width="300" style="width: 100%;">
                                            <option value="">--Select Class--</option>
                                        </select>
                                    </div>
                                </div>

                                

                                <div class="form-group">
                                    <div class="col-md-6 pull-right">
                                        <button class="btn btn-info btn-sm" type="submit" id="btnEditLesson"><span class="glyphicon glyphicon-add"></span>&nbsp;&nbsp;Update</button>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6 hide" id="InformationContainerEditLesson">
                                <div class="col-md-12">
                                    <div class="callout callout-info">
                                        <h4>Instructions!</h4>
                                        <ul type="text" name="UnorderEditReservedDateTimes" id="UnorderEditReservedDateTimes" width="300"></ul>
                                    </div>
                                </div>

                                
                                <div class="row hide" id="EditMessageContainerErrorLesson">
                                    <div class="col-md-12">
                                        <div class="alert alert-warning alert-dismissible">
                                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                            <h4><i class="icon fa fa-warning"></i> Alert!</h4>
                                            <ul>
                                                <li><lable id="editMessageError"> </lable></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                                <div class="row hide" id="EditMessageContainerSuccessLesson">
                                    <div class="col-md-12">
                                        <div class="alert alert-success alert-dismissible">
                                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                                            <h4><i class="icon fa fa-angle-right"></i> Success!</h4>
                                            <ul>
                                                <li><lable id="editMessageSuccessLesson"> </lable></li>
                                            </ul>
                                        </div>
                                    </div>
                                </div>
                            </div>


                            <div class="form-group hide">
                                <div class="col-md-6">
                                    <input class="form-control" type="text" id="txtfylingAndFTDScheduleId" name="txtfylingAndFTDScheduleId" />
                                    <input class="form-control" type="text" id="txtEditLessonId" name="txtEditLessonId" />
                                    <input class="form-control" type="text" id="txtEditTraineeId" name="txtEditTraineeId" />
                                    <input type="text" class="form-control" name="txtIsReschedule" id="txtIsReschedule" />
                                    <input type="text" class="form-control" name="txtSequence" id="txtSequence" />
                                    <input type="text" class="form-control" name="txtIsEditSubmitButtonClicked" id="txtIsEditSubmitButtonClicked" />
                                    <input type="text" class="form-control" name="txtIsAddSubmitButtonClicked" id="txtIsAddSubmitButtonClicked" />
                                    <input type="text" id="txtEditCustomDebriefing" name="txtEditCustomDebriefing" class="form-control" />
                                    <input type="text" id="txtEditCustomBriefing" name="txtEditCustomBriefing" class="form-control" />
                                    <input type="text" id="txtEditBatchClassId" name="txtEditBatchClassId" class="form-control" />
                                </div>
                            </div>

                        </div>
                    @*}*@

                    <div class="form-group hide">
                        <div class="col-md-6">
                            <input class="form-control" type="text" id="txtPhaseScheduleId" name="txtPhaseScheduleId" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane" id="checkIn_tab">
                <div id="checkIn-container">

                </div>
            </div>

            <div class="tab-pane" id="rampIn_tab">
                <div id="rampIn-container">

                </div>
            </div>
            <div class="tab-pane" id="rampOut_tab">
                <div id="rampOut-container">

                </div>
            </div>
        </div>
    </div>
</div>
</div>
</div>
</div>
</div>
<!--End, Edit Even modal popup-->
<!--start, Beriefing and Denriefing modal popup-->
<div class="modal modal-fade" id="BriefingAndDebriefingModelPopup" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
<div class="modal-dialog modal-lg" role="document">
<div class="modal-content">
<div class="modal-header">
<button type="button" class="close" id="editModalPopup" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
<h4 class="modal-title" id="myBriefingModalLabel">Briefing And Debriefing Detail.</h4>
</div>
<div class="modal-body">
<div class="box box-success">
    <div class="box-header with-border">
        <h3 class="box-title">Details for <span class="label label-warning">Briefing And Debriefing </span></h3>

        <div class="box-tools pull-right">
            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
        </div>
    </div>
    <!-- /.box-header -->
    <div class="box-body no-padding">
        <div class="form-horizontal">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">

                    <div class="form-group">
                        <div class="col-md-12">
                            <lable class="control-label" name="lblBriefingAndDebriefing" id="lblBriefingAndDebriefing"></lable>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</div>
</div>

</div>
</div>
<!--end, Beriefing and Denriefing modal popup-->
<!--start, drag and drop modal popup-->
<div class="modal modal-fade" id="DragAndDropModelPopup" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
<div class="modal-dialog modal-lg" role="document">
<div class="modal-content">
<div class="modal-header">
<button type="button" class="close" id="editModalPopup" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
<h4 class="modal-title" id="myBriefingModalLabel">Change Schedule Time.</h4>
</div>
<div class="modal-body">
<div class="box box-success">
    <div class="box-header with-border">
        <h3 class="box-title">Update <span class="label label-warning"> Briefing And Debriefing </span> for the dropped event accordingly.</h3>

        <div class="box-tools pull-right">
            <button type="button" class="btn btn-box-tool" data-widget="collapse">
                <i class="fa fa-minus"></i>
            </button>
        </div>
    </div>

    <!-- /.box-header -->
    <div class="box-body no-padding">
        @*@using (Html.BeginForm("UpdateScheduleFromDragAndDrop", "Scheduler", FormMethod.Post, new { enctype = "multipart/form-data", id = "btnEditDragAndDrop" }))
        {*@
            <div style="color:red">
                @Html.AntiForgeryToken()
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            </div>
            <div class="row hide">
                <input type="text" id="txtLessonTypeCurrent2" name="txtLessonTypeCurrent" value='@ViewBag.LessonType'/>
                <input type="text" id="txtBatchIdCurrent2" name="txtBatchIdCurrent"  value='@ViewBag.BatchClassId'/>
            </div>
        <div class="col-md-12 hide" id="InformationContainerDragDrop">
            <div class="row hide" id="EditDragDropSuccessContainer">
                <div class="col-md-12">
                    <div class="alert alert-success alert-dismissible">
                        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                        <h4><i class="icon fa fa-hand-o-right"></i> Success!</h4>
                        <ul>
                            <li><lable id="editDragDropSuccessMessage"> </lable></li>
                        </ul>
                    </div>
                </div>
            </div>
            <div class="row hide" id="EditDragDropFailContainer">
                <div class="col-md-12">
                    <div class="alert alert-danger alert-dismissible">
                        <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                        <h4><i class="icon fa fa-hand-o-right"></i> Failed!</h4>
                        <ul>
                            <li><lable id="editDragDropFailMessage"> </lable></li>
                        </ul>
                    </div>
                </div>
            </div>
            </div>
            <div class="form-horizontal">
                <div style="color:red"><lable class="control-label" name="lblDragAvailabilityMessage" id="lblDragAvailabilityMessage"></lable></div>

                <div class="form-group" id="BriefingDiv">
                    <lable class="control-label col-md-3"> Briefing Time </lable>
                    <div class="col-md-6">
                        <div class="input-group">
                            <select class="form-control input-sm" type="text" name="dpdDragBriefingTime" id="dpdDragBriefingTime" width="300">
                                <option value="">--Select Briefing Time --</option>
                            </select>
                            <div class="input-group-btn">
                                <button type="button" class="btn btn-sm btn-info btn-flat">
                                    <input type="checkbox" class="checkbox" id="ckbDragBriefing" name="ckbDragBriefing" />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group hide" id="CustomDragBriefingTime">
                    <lable class="control-label col-md-3"> From </lable>
                    <div class="col-md-6">
                        <div class="input-group  bootstrap-timepicker timepicker">
                            <input type="text" class="form-control" id="txtDragBriefingStartingTime" name="txtDragBriefingStartingTime">
                            <div class="input-group-addon">
                                <i class="fa fa-clock-o"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group" id="DebriefingDiv">
                    <lable class="control-label col-md-3"> Debriefing Time </lable>
                    <div class="col-md-6">
                        <div class="input-group">
                            <select class="form-control input-sm" type="text" name="dpdDragDebriefingTime" id="dpdDragDebriefingTime" width="300">
                                <option value="">--Select Debriefing Time --</option>
                            </select>
                            <div class="input-group-btn">
                                <button type="button" class="btn btn-sm btn-info btn-flat">
                                    <input type="checkbox" class="checkbox" id="ckbDragDebriefing" name="ckbDragDebriefing" />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group hide" id="CustomDragDebriefingTime">
                    <lable class="control-label col-md-3"> From </lable>
                    <div class="col-md-6">
                        <div class="input-group  bootstrap-timepicker timepicker">
                            <input type="text" class="form-control" id="txtDragDebriefingStartingTime" name="txtDragDebriefingStartingTime">
                            <div class="input-group-addon">
                                <i class="fa fa-clock-o"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-6 pull-right">
                        <button class="btn btn-info btn-sm" type="submit" id="btnUpdateDroppedEvent" name="btnUpdateDroppedEvent"><span class="glyphicon glyphicon-add"></span>&nbsp;&nbsp;Update</button>
                    </div>
                </div>

                <div class="form-group hide">
                    <div class="col-md-6">
                        <input type="text" id="txtDragCustomDebriefing" name="txtDragCustomDebriefing" class="form-control" />
                        <input type="text" id="txtDragCustomBriefing" name="txtDragCustomBriefing" class="form-control" />

                        <input type="text" id="txtDragDate" name="txtDragDate" class="form-control" />
                        <input type="text" id="txtDragStartingTime" name="txtDragStartingTime" class="form-control" />
                        <input type="text" id="txtDragEquipment" name="txtDragEquipment" class="form-control" />
                        <input type="text" id="txtDragLessonId" name="txtDragLessonId" class="form-control" />
                        <input type="text" id="txtDragTraineeId" name="txtDragTraineeId" class="form-control" />
                        <input type="text" id="txtDragInstructorId" name="txtDragInstructorId" class="form-control" />
                        <input class="form-control" type="text" id="txtDragfylingAndFTDScheduleId" name="txtDragfylingAndFTDScheduleId" />
                        <input type="text" id="txtDragAndDropEventType" name="txtDragAndDropEventType" class="form-control" />
                        <input type="text" class="form-control" name="txtIsEditDragAndDropSubmitButtonClicked" id="txtIsEditDragAndDropSubmitButtonClicked" />
                        <input type="text" class="form-control" name="txtIsEditDragAndDropBatchClassId" id="txtIsEditDragAndDropBatchClassId" />

                    </div>
                </div>
            </div>

            @*}*@
        </div>
</div>
</div>
</div>

</div>
</div>
<!--end, drag and drop modal popup-->
<!--Begin, Add Drag And Drop Trainee Even modal popup-->
<div class="modal modal-fade" id="addScheduleByDragAndDropTraineeModalPopup" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
<div class="modal-dialog modal-lg" role="document">
<div class="modal-content">
<div class="modal-header">
<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
<h5 class="modal-title"> You are trying to schedule <strong><label id="lblMyModalTitleTraineeName"></label></strong> at <strong><label id="lblDragAndDropTraineeModalTitleTime"></label></strong></h5>
</div>
<div class="modal-body">
Press ESC button to exit.
<div style="color:red"><lable class="control-label" name="lblAddScheduleByDragAndDropTraineeMessage" id="lblAddScheduleByDragAndDropTraineeMessage"></lable></div>
<div class="form-horizontal add-event">

    @*@using (Html.BeginForm("AddNewTraineeLessonSchedule", "Scheduler", FormMethod.Post, new { enctype = "multipart/form-data", id = "btnAddDragAndDropTraineeEvent" }))
    {*@
        <div class="row" style="color:red">
            @Html.AntiForgeryToken()
            @Html.ValidationSummary()
        </div>
        <br />
        <div class="row">
            <div class="col-md-7">

                <div class="form-group">
                    <lable class="control-label col-md-3">Start Time </lable>
                    <div class="col-md-9">
                        <div class="input-group  bootstrap-timepicker timepicker">
                            <input type="text" class="form-control" id="txtAddDragAndDropTraineeStartingTime" name="txtAddDragAndDropTraineeStartingTime" data-val="true" data-val-required="Time is required." required>
                            <div class="input-group-addon Search-Equipment">
                                <i class="fa fa-clock-o"></i>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <lable class="control-label col-md-3">Trainees</lable>
                    <div class="col-md-9">
                        <select class="form-control input-sm select2 AddDragAndDropTrainees" type="text" name="dpdAddDragAndDropTrainees" data-id="1" id="dpdAddDragAndDropTrainees" width="300" multiple="multiple" style="width: 100%;" data-val="true" data-val-required="Trainee is required." required></select>
                    </div>
                </div>
                <div class="form-group">
                    <lable class="control-label col-md-3">Lesson</lable>
                    <div class="col-md-9">
                        <select class="form-control input-sm select2 AddDragAndDropTraineeLessonClass" type="text" name="dpdAddDragAndDropTraineeLesson" data-id="1" id="dpdAddDragAndDropTraineeLesson" width="300" multiple="multiple" style="width: 100%;" data-val="true" data-val-required="Lesson is required." required></select>
                    </div>
                </div>

                <div class="form-group hide" id="RescheduleReasonIdDiv">
                    <lable class="control-label col-md-3">Reschedule Reason</lable>
                    <div class="col-md-9">
                        @Html.DropDownList("RescheduleReasonId", null, htmlAttributes: new { @class = "form-control", id = "RescheduleReasonId", name = "RescheduleReasonId" })
                        @*<select class="form-control input-sm select2 AddDragAndDropTraineeLessonClass" type="text" name="dpdAddDragAndDropTraineeLesson" data-id="1" id="dpdAddDragAndDropTraineeLesson" width="300" multiple="multiple" style="width: 100%;" data-val="true" data-val-required="Lesson is required." required></select>*@
                    </div>
                </div>

                <div class="form-group">
                    <lable class="control-label col-md-3">Instructor</lable>
                    <div class="col-md-9">
                        <select class="form-control input-sm" type="text" name="dpdAddDragAndDropInstructor" id="dpdAddDragAndDropInstructor" width="300" data-val="true" data-val-required="Instructor is required." required>
                            <option value="">--Select Instructor--</option>
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <lable class="control-label col-md-3"> Briefing Time </lable>
                    <div class="col-md-9">
                        <div class="input-group">
                            <select class="form-control input-sm" type="text" name="dpdDragAndDropTraineeBriefingTime" id="dpdDragAndDropTraineeBriefingTime" width="300">
                                <option value="">--Select Briefing Time --</option>
                            </select>
                            <div class="input-group-btn">
                                <button type="button" class="btn btn-sm btn-info btn-flat">
                                    <input type="checkbox" class="checkbox" id="chbAddDragAndDropTraineeBriefing" name="chbAddDragAndDropTraineeBriefing" />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group hide" id="DragAndDropTraineeCustomBriefingTime">
                    <lable class="control-label col-md-3"> From </lable>
                    <div class="col-md-9">
                        <div class="input-group  bootstrap-timepicker timepicker">
                            <input type="text" class="form-control" id="txtAddDragAndDropTraineeBriefingStartingTime" name="txtAddDragAndDropTraineeBriefingStartingTime">
                            <div class="input-group-addon">
                                <i class="fa fa-clock-o"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <lable class="control-label col-md-3"> Debriefing Time </lable>
                    <div class="col-md-9">
                        <div class="input-group">
                            <select class="form-control input-sm" type="text" name="dpdDragAndDropTraineeDebriefingTime" id="dpdDragAndDropTraineeDebriefingTime" width="300">
                                <option value="">--Select Debriefing Time--</option>
                            </select>
                            <div class="input-group-btn">
                                <button type="button" class="btn btn-sm btn-info btn-flat">
                                    <input type="checkbox" class="checkbox" id="chbAddDebriefing" name="chbAddDebriefing" />
                                </button>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group hide" id="DragAndDropTraineeCustomDebriefingTime">
                    <lable class="control-label col-md-3"> From </lable>
                    <div class="col-md-9">
                        <div class="input-group  bootstrap-timepicker timepicker">
                            <input type="text" class="form-control" id="txtAddDragAndDropTraineeDebriefingStartingTime" name="txtAddDragAndDropTraineeDebriefingStartingTime">
                            <div class="input-group-addon">
                                <i class="fa fa-clock-o"></i>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-6 pull-right">
                        <button class="btn btn-info btn-sm" type="submit" id="btnAddDragAndDropTraineeEvent" name="btnAddDragAndDropTraineeEvent"><span class="glyphicon glyphicon-add"></span>&nbsp;&nbsp;Save</button>
                    </div>
                </div>

            </div>

            <div class="col-md-5 hide" id="DragAndDropTraineeInstructionContainer">
                <div class="row hide" id="DragdropAddSuccessMessageTab">
                    <div class="col-md-12">
                        <div class="alert alert-success alert-dismissible">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                            <h4><i class="icon fa fa-caret-right"></i> Success!</h4>
                            <ul>
                                <li><lable id="DragdropAddSuccessMessage"> </lable></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="row hide" id="DragdropAddFailMessageTab">
                    <div class="col-md-12">
                        <div class="alert alert-danger alert-dismissible">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                            <h4><i class="icon fa fa-caret-right"></i> Error!</h4>
                            <ul>
                                <li><lable id="DragdropAddFailMessage"> </lable></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="callout callout-info">
                            <h4>Instructions!</h4>
                            <ul type="text" name="DragAndDropTraineeUnorderReservedDateTimes" id="DragAndDropTraineeUnorderReservedDateTimes" width="300"></ul>
                        </div>
                    </div>
                </div>
                <div class="row hide" id="DragAndDropBriefingAndDebriefingMessageContainer">
                    <div class="col-md-12">
                        <div class="alert alert-warning alert-dismissible">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                            <h4><i class="icon fa fa-warning"></i> Alert!</h4>
                            <ul>
                                <li><lable id="DragAndDropTraineeBriefingMessage"> </lable></li>
                                <li><lable id="DragAndDropTraineeDebriefingMessage"> </lable></li>
                            </ul>
                        </div>
                    </div>
                </div>
                <div class="row hide" id="LeavesAndLicenseExpiryMessage">
                    <div class="col-md-12">
                        <div class="alert alert-danger alert-dismissible">
                            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">×</button>
                            <h4><i class="icon fa fa-warning"></i> Alert!</h4>
                            <ul>
                                <li><lable id="ResponceMessage"> </lable></li>
                            </ul>
                        </div>
                    </div>
                </div>
             
            </div>
                                
        </div>
        <div class="form-group hide">
            <div class="col-md-6">
                <input class="form-control" type="text" id="txtDragAndDropTraineeTraineeIdHide" name="txtDragAndDropTraineeTraineeIdHide" />
                <input class="form-control" type="text" id="txtDragAndDropTraineeEquipmentIdHide" name="txtDragAndDropTraineeEquipmentIdHide" />
                <input type="text" class="form-control input-sm" name="txtAddDragAndDropTraineeDateHide" id="txtAddDragAndDropTraineeDateHide" readonly />
                <input class="form-control" type="text" id="txtDragAndDropLessonIdHide" name="txtDragAndDropLessonIdHide" />                                
@*<input type="text" class="form-control input-sm" name="txtBriefingTime" id="txtBriefingTime" readonly />
                    <input type="text" class="form-control input-sm" name="txtDebriefingTime" id="txtDebriefingTime" readonly />*@
                <input type="text" id="txtDragAndDropTraineeTraineeLesson" name="txtDragAndDropTraineeTraineeLesson" class="form-control" />
                <input type="text" id="txtDragAndDropTraineeCustomDebriefing" name="txtDragAndDropTraineeCustomDebriefing" class="form-control" />
                <input type="text" id="txtDragAndDropTraineeCustomBriefing" name="txtDragAndDropTraineeCustomBriefing" class="form-control" />
                <input type="text" id="txtDragAndDropEventType" name="txtDragAndDropEventType" class="form-control" />
            </div>
        </div>
    @*}*@


</div>
</div>
</div>
</div>
</div>
<!-- End, Add Drag And Drop Trainee Even modal popup-->
<!--Hidden Data for Dispatcher-->
<div class="hide">
<input type="text" name="txtIsActivityCheckInSubmitButtonClicked" id="txtIsActivityCheckInSubmitButtonClicked" />
<input type="text" name="txtIsActivityAuthorizationSubmitButtonClicked" id="txtIsActivityAuthorizationSubmitButtonClicked" />
<input type="text" name="txtIsActivityRampOutSubmitButtonClicked" id="txtIsActivityRampOutSubmitButtonClicked" />
<input type="text" name="txtIsActivityRampInSubmitButtonClicked" id="txtIsActivityRampInSubmitButtonClicked" />
<input type="text" name="txtIsActivityFlightLogSubmitButtonClicked" id="txtIsActivityFlightLogSubmitButtonClicked" />

</div>
</div>
@*@Html.Partial("TraineeEvaluationTemplatePartialView")*@

